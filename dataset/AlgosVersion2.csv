Algorithm,Method,AST,AAST
DijkstraAlgorithm,Hash-Map-1,"CompilationUnit(imports=[Import(path=java.util.HashMap, static=False, wildcard=False), Import(path=java.util.Map, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=HashMap, sub_type=None)), name=distances)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=HashMap, sub_type=None)), name=predecessors)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))], dimensions=[], name=Map, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Integer, selectors=[])], member=put, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null)], member=put, postfix_operators=[], prefix_operators=[], qualifier=predecessors, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=keySet, postfix_operators=[], prefix_operators=[], qualifier=graph, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=node)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)], member=put, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), label=None), WhileStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=currentNode)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Integer, selectors=[]), name=minDistance)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), name=currentDistance)], modifiers=set(), type=BasicType(dimensions=[], name=int)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=currentDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=currentDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]))]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=keySet, postfix_operators=[], prefix_operators=[], qualifier=graph, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=node)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))), label=None), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getKey, postfix_operators=[], prefix_operators=[], qualifier=entry, selectors=[], type_arguments=None), name=neighbor)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getValue, postfix_operators=[], prefix_operators=[], qualifier=entry, selectors=[], type_arguments=None), name=weight)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), operandr=MemberReference(member=weight, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), name=potentialDistance)], modifiers=set(), type=BasicType(dimensions=[], name=int)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=potentialDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MethodInvocation(arguments=[MemberReference(member=neighbor, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=neighbor, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=potentialDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=put, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=neighbor, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=put, postfix_operators=[], prefix_operators=[], qualifier=predecessors, selectors=[], type_arguments=None), label=None)]))]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=graph, selectors=[MethodInvocation(arguments=[], member=entrySet, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=entry)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Map, sub_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=None, name=Entry, sub_type=None)))), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=remove, postfix_operators=[], prefix_operators=[], qualifier=graph, selectors=[], type_arguments=None), label=None)]), condition=MethodInvocation(arguments=[], member=isEmpty, postfix_operators=[], prefix_operators=['!'], qualifier=graph, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public', 'static'}, name=dijkstra, parameters=[FormalParameter(annotations=[], modifiers=set(), name=graph, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=start, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=HashMap, sub_type=None)), name=graph)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None))], dimensions=[], name=Map, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""A""), name=startNode)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=graph, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=startNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=dijkstra, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=result)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Shortest distances from ""), operandr=MemberReference(member=startNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="": ""), operator=+), operandr=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=DijkstraWithoutPriorityQueue, type_parameters=None)])","{'imports': [{'path': 'java.util.HashMap', 'static': False, 'wildcard': False}, {'path': 'java.util.Map', 'static': False, 'wildcard': False}], 'types': [{'body': [{'body': [{'type': 'Map'}, {'type': 'Map'}, {'body': {'statements': [{'expression': {'arguments': [{}, {}]}}, {'expression': {'arguments': [{}, {'value': 'null'}]}}]}, 'control': {'var': {'type': 'String'}}}, {'expression': {'arguments': [{}, {'value': '0'}]}}, {'body': {'statements': [{'type': 'String'}, {'type': 'int'}, {'body': {'statements': [{'type': 'int'}, {'condition': {'operator': '<'}, 'then_statement': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '='}}]}}]}, 'control': {'var': {'type': 'String'}}}, {'body': {'statements': [{'type': 'String'}, {'type': 'int'}, {'type': 'int'}, {'condition': {'operandr': {'arguments': [{}]}, 'operator': '<'}, 'then_statement': {'statements': [{'expression': {'arguments': [{}, {}]}}, {'expression': {'arguments': [{}, {}]}}]}}]}, 'control': {'iterable': {'arguments': [{}], 'selectors': [{}]}, 'var': {'type': 'Map'}}}, {'expression': {'arguments': [{}]}}]}, 'condition': {'prefix_operators': [{}]}}, {}], 'name': 'dijkstra', 'parameters': [{'arguments': [{'type': 'String'}, {'type': 'Map'}], 'name': 'Map'}, {'name': 'String'}], 'return_type': {'arguments': [{'type': 'String'}, {'type': 'Integer'}], 'name': 'Map'}}, {'body': [{'type': 'Map'}, {'type': 'String'}, {'type': 'Map'}, {'expression': {'arguments': [{'operandl': {'operandl': {'operandl': {'value': '""Shortest distances from ""'}, 'operator': '+'}, 'operandr': {'value': '"": ""'}, 'operator': '+'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'DijkstraWithoutPriorityQueue'}]}"
DijkstraAlgorithm,Hash-Map-2,"CompilationUnit(imports=[Import(path=java.util.HashMap, static=False, wildcard=False), Import(path=java.util.Map, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=HashMap, sub_type=None)), name=distances)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=HashMap, sub_type=None)), name=predecessors)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))], dimensions=[], name=Map, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=graph, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=predecessors, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=initialize, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), WhileStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=graph, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=findMinDistanceNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=currentNode)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=graph, selectors=[], type_arguments=None), MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=predecessors, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=updateDistances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=remove, postfix_operators=[], prefix_operators=[], qualifier=graph, selectors=[], type_arguments=None), label=None)]), condition=MethodInvocation(arguments=[], member=isEmpty, postfix_operators=[], prefix_operators=['!'], qualifier=graph, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public', 'static'}, name=dijkstra, parameters=[FormalParameter(annotations=[], modifiers=set(), name=graph, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=start, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Integer, selectors=[])], member=put, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null)], member=put, postfix_operators=[], prefix_operators=[], qualifier=predecessors, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=keySet, postfix_operators=[], prefix_operators=[], qualifier=graph, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=node)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)], member=put, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'private', 'static'}, name=initialize, parameters=[FormalParameter(annotations=[], modifiers=set(), name=graph, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=distances, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=predecessors, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=start, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=currentNode)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Integer, selectors=[]), name=minDistance)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), name=currentDistance)], modifiers=set(), type=BasicType(dimensions=[], name=int)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=currentDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=currentDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]))]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=keySet, postfix_operators=[], prefix_operators=[], qualifier=graph, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=node)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))), label=None), ReturnStatement(expression=MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'private', 'static'}, name=findMinDistanceNode, parameters=[FormalParameter(annotations=[], modifiers=set(), name=graph, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=distances, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getKey, postfix_operators=[], prefix_operators=[], qualifier=entry, selectors=[], type_arguments=None), name=neighbor)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getValue, postfix_operators=[], prefix_operators=[], qualifier=entry, selectors=[], type_arguments=None), name=weight)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), operandr=MemberReference(member=weight, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), name=potentialDistance)], modifiers=set(), type=BasicType(dimensions=[], name=int)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=potentialDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MethodInvocation(arguments=[MemberReference(member=neighbor, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=neighbor, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=potentialDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=put, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=neighbor, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=put, postfix_operators=[], prefix_operators=[], qualifier=predecessors, selectors=[], type_arguments=None), label=None)]))]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=entrySet, postfix_operators=[], prefix_operators=[], qualifier=neighbors, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=entry)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Map, sub_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=None, name=Entry, sub_type=None)))), label=None)], documentation=None, modifiers={'private', 'static'}, name=updateDistances, parameters=[FormalParameter(annotations=[], modifiers=set(), name=neighbors, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=distances, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=predecessors, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=currentNode, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=HashMap, sub_type=None)), name=graph)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None))], dimensions=[], name=Map, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""A""), name=startNode)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=graph, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=startNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=dijkstra, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=result)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Shortest distances from ""), operandr=MemberReference(member=startNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="": ""), operator=+), operandr=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=DijkstraWithoutPriorityQueue, type_parameters=None)])","{'imports': [{'path': 'java.util.HashMap', 'static': False, 'wildcard': False}, {'path': 'java.util.Map', 'static': False, 'wildcard': False}], 'types': [{'body': [{'body': [{'type': 'Map'}, {'type': 'Map'}, {'expression': {'arguments': [{}, {}, {}, {}]}}, {'body': {'statements': [{'type': 'String'}, {'expression': {'arguments': [{'arguments': [{}]}, {}, {}, {}]}}, {'expression': {'arguments': [{}]}}]}, 'condition': {'prefix_operators': [{}]}}, {}], 'name': 'dijkstra', 'parameters': [{'arguments': [{'type': 'String'}, {'type': 'Map'}], 'name': 'Map'}, {'name': 'String'}], 'return_type': {'arguments': [{'type': 'String'}, {'type': 'Integer'}], 'name': 'Map'}}, {'body': [{'body': {'statements': [{'expression': {'arguments': [{}, {}]}}, {'expression': {'arguments': [{}, {'value': 'null'}]}}]}, 'control': {'var': {'type': 'String'}}}, {'expression': {'arguments': [{}, {'value': '0'}]}}], 'name': 'initialize', 'parameters': [{'arguments': [{'type': 'String'}, {'type': 'Map'}], 'name': 'Map'}, {'arguments': [{'type': 'String'}, {'type': 'Integer'}], 'name': 'Map'}, {'arguments': [{'type': 'String'}, {'type': 'String'}], 'name': 'Map'}, {'name': 'String'}]}, {'body': [{'type': 'String'}, {'type': 'int'}, {'body': {'statements': [{'type': 'int'}, {'condition': {'operator': '<'}, 'then_statement': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '='}}]}}]}, 'control': {'var': {'type': 'String'}}}, {}], 'name': 'findMinDistanceNode', 'parameters': [{'arguments': [{'type': 'String'}, {'type': 'Map'}], 'name': 'Map'}, {'arguments': [{'type': 'String'}, {'type': 'Integer'}], 'name': 'Map'}], 'return_type': {'name': 'String'}}, {'body': [{'body': {'statements': [{'type': 'String'}, {'type': 'int'}, {'type': 'int'}, {'condition': {'operandr': {'arguments': [{}]}, 'operator': '<'}, 'then_statement': {'statements': [{'expression': {'arguments': [{}, {}]}}, {'expression': {'arguments': [{}, {}]}}]}}]}, 'control': {'var': {'type': 'Map'}}}], 'name': 'updateDistances', 'parameters': [{'arguments': [{'type': 'String'}, {'type': 'Integer'}], 'name': 'Map'}, {'arguments': [{'type': 'String'}, {'type': 'Integer'}], 'name': 'Map'}, {'arguments': [{'type': 'String'}, {'type': 'String'}], 'name': 'Map'}, {'name': 'String'}]}, {'body': [{'type': 'Map'}, {'type': 'String'}, {'type': 'Map'}, {'expression': {'arguments': [{'operandl': {'operandl': {'operandl': {'value': '""Shortest distances from ""'}, 'operator': '+'}, 'operandr': {'value': '"": ""'}, 'operator': '+'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'DijkstraWithoutPriorityQueue'}]}"
DijkstraAlgorithm,Hash-Map-3,"CompilationUnit(imports=[Import(path=java.util.HashMap, static=False, wildcard=False), Import(path=java.util.Map, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=HashMap, sub_type=None)), name=distances)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=HashMap, sub_type=None)), name=predecessors)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))], dimensions=[], name=Map, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Integer, selectors=[])], member=put, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null)], member=put, postfix_operators=[], prefix_operators=[], qualifier=predecessors, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=keySet, postfix_operators=[], prefix_operators=[], qualifier=graph, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=node)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)], member=put, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), label=None), WhileStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=graph, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=findMinDistanceNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=currentNode)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=graph, selectors=[], type_arguments=None), MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=predecessors, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=updateDistances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=remove, postfix_operators=[], prefix_operators=[], qualifier=graph, selectors=[], type_arguments=None), label=None)]), condition=MethodInvocation(arguments=[], member=isEmpty, postfix_operators=[], prefix_operators=['!'], qualifier=graph, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public', 'static'}, name=dijkstra, parameters=[FormalParameter(annotations=[], modifiers=set(), name=graph, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=start, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=currentNode)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Integer, selectors=[]), name=minDistance)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), name=currentDistance)], modifiers=set(), type=BasicType(dimensions=[], name=int)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=currentDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=currentDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]))]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=keySet, postfix_operators=[], prefix_operators=[], qualifier=graph, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=node)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))), label=None), ReturnStatement(expression=MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'private', 'static'}, name=findMinDistanceNode, parameters=[FormalParameter(annotations=[], modifiers=set(), name=distances, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=graph, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getKey, postfix_operators=[], prefix_operators=[], qualifier=entry, selectors=[], type_arguments=None), name=neighbor)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getValue, postfix_operators=[], prefix_operators=[], qualifier=entry, selectors=[], type_arguments=None), name=weight)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), operandr=MemberReference(member=weight, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), name=potentialDistance)], modifiers=set(), type=BasicType(dimensions=[], name=int)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=potentialDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MethodInvocation(arguments=[MemberReference(member=neighbor, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=neighbor, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=potentialDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=put, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=neighbor, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=put, postfix_operators=[], prefix_operators=[], qualifier=predecessors, selectors=[], type_arguments=None), label=None)]))]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=entrySet, postfix_operators=[], prefix_operators=[], qualifier=neighbors, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=entry)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Map, sub_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=None, name=Entry, sub_type=None)))), label=None)], documentation=None, modifiers={'private', 'static'}, name=updateDistances, parameters=[FormalParameter(annotations=[], modifiers=set(), name=neighbors, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=distances, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=predecessors, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=currentNode, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=HashMap, sub_type=None)), name=graph)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None))], dimensions=[], name=Map, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""A""), name=startNode)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=graph, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=startNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=dijkstra, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=result)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Shortest distances from ""), operandr=MemberReference(member=startNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="": ""), operator=+), operandr=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=DijkstraWithoutPriorityQueue, type_parameters=None)])","{'imports': [{'path': 'java.util.HashMap', 'static': False, 'wildcard': False}, {'path': 'java.util.Map', 'static': False, 'wildcard': False}], 'types': [{'body': [{'body': [{'type': 'Map'}, {'type': 'Map'}, {'body': {'statements': [{'expression': {'arguments': [{}, {}]}}, {'expression': {'arguments': [{}, {'value': 'null'}]}}]}, 'control': {'var': {'type': 'String'}}}, {'expression': {'arguments': [{}, {'value': '0'}]}}, {'body': {'statements': [{'type': 'String'}, {'expression': {'arguments': [{'arguments': [{}]}, {}, {}, {}]}}, {'expression': {'arguments': [{}]}}]}, 'condition': {'prefix_operators': [{}]}}, {}], 'name': 'dijkstra', 'parameters': [{'arguments': [{'type': 'String'}, {'type': 'Map'}], 'name': 'Map'}, {'name': 'String'}], 'return_type': {'arguments': [{'type': 'String'}, {'type': 'Integer'}], 'name': 'Map'}}, {'body': [{'type': 'String'}, {'type': 'int'}, {'body': {'statements': [{'type': 'int'}, {'condition': {'operator': '<'}, 'then_statement': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '='}}]}}]}, 'control': {'var': {'type': 'String'}}}, {}], 'name': 'findMinDistanceNode', 'parameters': [{'arguments': [{'type': 'String'}, {'type': 'Integer'}], 'name': 'Map'}, {'arguments': [{'type': 'String'}, {'type': 'Map'}], 'name': 'Map'}], 'return_type': {'name': 'String'}}, {'body': [{'body': {'statements': [{'type': 'String'}, {'type': 'int'}, {'type': 'int'}, {'condition': {'operandr': {'arguments': [{}]}, 'operator': '<'}, 'then_statement': {'statements': [{'expression': {'arguments': [{}, {}]}}, {'expression': {'arguments': [{}, {}]}}]}}]}, 'control': {'var': {'type': 'Map'}}}], 'name': 'updateDistances', 'parameters': [{'arguments': [{'type': 'String'}, {'type': 'Integer'}], 'name': 'Map'}, {'arguments': [{'type': 'String'}, {'type': 'Integer'}], 'name': 'Map'}, {'arguments': [{'type': 'String'}, {'type': 'String'}], 'name': 'Map'}, {'name': 'String'}]}, {'body': [{'type': 'Map'}, {'type': 'String'}, {'type': 'Map'}, {'expression': {'arguments': [{'operandl': {'operandl': {'operandl': {'value': '""Shortest distances from ""'}, 'operator': '+'}, 'operandr': {'value': '"": ""'}, 'operator': '+'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'DijkstraWithoutPriorityQueue'}]}"
DijkstraAlgorithm,Hash-Map-4,"CompilationUnit(imports=[Import(path=java.util.HashMap, static=False, wildcard=False), Import(path=java.util.Map, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=graph, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=initializeDistances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=distances)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None)), WhileStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=graph, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=findMinDistanceNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=currentNode)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=graph, selectors=[], type_arguments=None), MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=updateDistances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=remove, postfix_operators=[], prefix_operators=[], qualifier=graph, selectors=[], type_arguments=None), label=None)]), condition=MethodInvocation(arguments=[], member=isEmpty, postfix_operators=[], prefix_operators=['!'], qualifier=graph, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public', 'static'}, name=dijkstra, parameters=[FormalParameter(annotations=[], modifiers=set(), name=graph, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=start, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=HashMap, sub_type=None)), name=distances)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Integer, selectors=[])], member=put, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=keySet, postfix_operators=[], prefix_operators=[], qualifier=graph, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=node)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)], member=put, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'private', 'static'}, name=initializeDistances, parameters=[FormalParameter(annotations=[], modifiers=set(), name=graph, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=start, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=currentNode)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Integer, selectors=[]), name=minDistance)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), name=currentDistance)], modifiers=set(), type=BasicType(dimensions=[], name=int)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=currentDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=currentDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]))]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=keySet, postfix_operators=[], prefix_operators=[], qualifier=graph, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=node)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))), label=None), ReturnStatement(expression=MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'private', 'static'}, name=findMinDistanceNode, parameters=[FormalParameter(annotations=[], modifiers=set(), name=distances, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=graph, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getKey, postfix_operators=[], prefix_operators=[], qualifier=entry, selectors=[], type_arguments=None), name=neighbor)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getValue, postfix_operators=[], prefix_operators=[], qualifier=entry, selectors=[], type_arguments=None), name=weight)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), operandr=MemberReference(member=weight, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), name=potentialDistance)], modifiers=set(), type=BasicType(dimensions=[], name=int)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=potentialDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MethodInvocation(arguments=[MemberReference(member=neighbor, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=neighbor, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=potentialDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=put, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), label=None)]))]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=entrySet, postfix_operators=[], prefix_operators=[], qualifier=neighbors, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=entry)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Map, sub_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=None, name=Entry, sub_type=None)))), label=None)], documentation=None, modifiers={'private', 'static'}, name=updateDistances, parameters=[FormalParameter(annotations=[], modifiers=set(), name=neighbors, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=distances, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=currentNode, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=HashMap, sub_type=None)), name=graph)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None))], dimensions=[], name=Map, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""A""), name=startNode)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=graph, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=startNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=dijkstra, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=result)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Shortest distances from ""), operandr=MemberReference(member=startNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="": ""), operator=+), operandr=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=DijkstraWithoutPriorityQueue, type_parameters=None)])","{'imports': [{'path': 'java.util.HashMap', 'static': False, 'wildcard': False}, {'path': 'java.util.Map', 'static': False, 'wildcard': False}], 'types': [{'body': [{'body': [{'type': 'Map'}, {'body': {'statements': [{'type': 'String'}, {'expression': {'arguments': [{'arguments': [{}]}, {}, {}]}}, {'expression': {'arguments': [{}]}}]}, 'condition': {'prefix_operators': [{}]}}, {}], 'name': 'dijkstra', 'parameters': [{'arguments': [{'type': 'String'}, {'type': 'Map'}], 'name': 'Map'}, {'name': 'String'}], 'return_type': {'arguments': [{'type': 'String'}, {'type': 'Integer'}], 'name': 'Map'}}, {'body': [{'type': 'Map'}, {'body': {'statements': [{'expression': {'arguments': [{}, {}]}}]}, 'control': {'var': {'type': 'String'}}}, {'expression': {'arguments': [{}, {'value': '0'}]}}, {}], 'name': 'initializeDistances', 'parameters': [{'arguments': [{'type': 'String'}, {'type': 'Map'}], 'name': 'Map'}, {'name': 'String'}], 'return_type': {'arguments': [{'type': 'String'}, {'type': 'Integer'}], 'name': 'Map'}}, {'body': [{'type': 'String'}, {'type': 'int'}, {'body': {'statements': [{'type': 'int'}, {'condition': {'operator': '<'}, 'then_statement': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '='}}]}}]}, 'control': {'var': {'type': 'String'}}}, {}], 'name': 'findMinDistanceNode', 'parameters': [{'arguments': [{'type': 'String'}, {'type': 'Integer'}], 'name': 'Map'}, {'arguments': [{'type': 'String'}, {'type': 'Map'}], 'name': 'Map'}], 'return_type': {'name': 'String'}}, {'body': [{'body': {'statements': [{'type': 'String'}, {'type': 'int'}, {'type': 'int'}, {'condition': {'operandr': {'arguments': [{}]}, 'operator': '<'}, 'then_statement': {'statements': [{'expression': {'arguments': [{}, {}]}}]}}]}, 'control': {'var': {'type': 'Map'}}}], 'name': 'updateDistances', 'parameters': [{'arguments': [{'type': 'String'}, {'type': 'Integer'}], 'name': 'Map'}, {'arguments': [{'type': 'String'}, {'type': 'Integer'}], 'name': 'Map'}, {'name': 'String'}]}, {'body': [{'type': 'Map'}, {'type': 'String'}, {'type': 'Map'}, {'expression': {'arguments': [{'operandl': {'operandl': {'operandl': {'value': '""Shortest distances from ""'}, 'operator': '+'}, 'operandr': {'value': '"": ""'}, 'operator': '+'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'DijkstraWithoutPriorityQueue'}]}"
DijkstraAlgorithm,Hash-Map-5,"CompilationUnit(imports=[Import(path=java.util.HashMap, static=False, wildcard=False), Import(path=java.util.Map, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=graph, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=initializeDistances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=distances)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None)), WhileStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=graph, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=findNodeWithMinDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=currentNode)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=graph, selectors=[], type_arguments=None), MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=updateDistances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=remove, postfix_operators=[], prefix_operators=[], qualifier=graph, selectors=[], type_arguments=None), label=None)]), condition=MethodInvocation(arguments=[], member=isEmpty, postfix_operators=[], prefix_operators=['!'], qualifier=graph, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public', 'static'}, name=dijkstra, parameters=[FormalParameter(annotations=[], modifiers=set(), name=graph, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=start, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=HashMap, sub_type=None)), name=distances)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Integer, selectors=[])], member=put, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=keySet, postfix_operators=[], prefix_operators=[], qualifier=graph, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=node)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)], member=put, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'private', 'static'}, name=initializeDistances, parameters=[FormalParameter(annotations=[], modifiers=set(), name=graph, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=start, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=currentNode)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Integer, selectors=[]), name=minDistance)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), name=currentDistance)], modifiers=set(), type=BasicType(dimensions=[], name=int)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=currentDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=currentDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]))]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=keySet, postfix_operators=[], prefix_operators=[], qualifier=graph, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=node)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))), label=None), ReturnStatement(expression=MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'private', 'static'}, name=findNodeWithMinDistance, parameters=[FormalParameter(annotations=[], modifiers=set(), name=distances, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=graph, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getKey, postfix_operators=[], prefix_operators=[], qualifier=entry, selectors=[], type_arguments=None), name=neighbor)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getValue, postfix_operators=[], prefix_operators=[], qualifier=entry, selectors=[], type_arguments=None), name=weight)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=currentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), operandr=MemberReference(member=weight, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), name=potentialDistance)], modifiers=set(), type=BasicType(dimensions=[], name=int)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=potentialDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MethodInvocation(arguments=[MemberReference(member=neighbor, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=neighbor, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=potentialDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=put, postfix_operators=[], prefix_operators=[], qualifier=distances, selectors=[], type_arguments=None), label=None)]))]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=entrySet, postfix_operators=[], prefix_operators=[], qualifier=neighbors, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=entry)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Map, sub_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=None, name=Entry, sub_type=None)))), label=None)], documentation=None, modifiers={'private', 'static'}, name=updateDistances, parameters=[FormalParameter(annotations=[], modifiers=set(), name=neighbors, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=distances, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=currentNode, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=HashMap, sub_type=None)), name=graph)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None))], dimensions=[], name=Map, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""A""), name=startNode)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=graph, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=startNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=dijkstra, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=result)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=Map, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Shortest distances from ""), operandr=MemberReference(member=startNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="": ""), operator=+), operandr=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=DijkstraWithoutPriorityQueue, type_parameters=None)])","{'imports': [{'path': 'java.util.HashMap', 'static': False, 'wildcard': False}, {'path': 'java.util.Map', 'static': False, 'wildcard': False}], 'types': [{'body': [{'body': [{'type': 'Map'}, {'body': {'statements': [{'type': 'String'}, {'expression': {'arguments': [{'arguments': [{}]}, {}, {}]}}, {'expression': {'arguments': [{}]}}]}, 'condition': {'prefix_operators': [{}]}}, {}], 'name': 'dijkstra', 'parameters': [{'arguments': [{'type': 'String'}, {'type': 'Map'}], 'name': 'Map'}, {'name': 'String'}], 'return_type': {'arguments': [{'type': 'String'}, {'type': 'Integer'}], 'name': 'Map'}}, {'body': [{'type': 'Map'}, {'body': {'statements': [{'expression': {'arguments': [{}, {}]}}]}, 'control': {'var': {'type': 'String'}}}, {'expression': {'arguments': [{}, {'value': '0'}]}}, {}], 'name': 'initializeDistances', 'parameters': [{'arguments': [{'type': 'String'}, {'type': 'Map'}], 'name': 'Map'}, {'name': 'String'}], 'return_type': {'arguments': [{'type': 'String'}, {'type': 'Integer'}], 'name': 'Map'}}, {'body': [{'type': 'String'}, {'type': 'int'}, {'body': {'statements': [{'type': 'int'}, {'condition': {'operator': '<'}, 'then_statement': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '='}}]}}]}, 'control': {'var': {'type': 'String'}}}, {}], 'name': 'findNodeWithMinDistance', 'parameters': [{'arguments': [{'type': 'String'}, {'type': 'Integer'}], 'name': 'Map'}, {'arguments': [{'type': 'String'}, {'type': 'Map'}], 'name': 'Map'}], 'return_type': {'name': 'String'}}, {'body': [{'body': {'statements': [{'type': 'String'}, {'type': 'int'}, {'type': 'int'}, {'condition': {'operandr': {'arguments': [{}]}, 'operator': '<'}, 'then_statement': {'statements': [{'expression': {'arguments': [{}, {}]}}]}}]}, 'control': {'var': {'type': 'Map'}}}], 'name': 'updateDistances', 'parameters': [{'arguments': [{'type': 'String'}, {'type': 'Integer'}], 'name': 'Map'}, {'arguments': [{'type': 'String'}, {'type': 'Integer'}], 'name': 'Map'}, {'name': 'String'}]}, {'body': [{'type': 'Map'}, {'type': 'String'}, {'type': 'Map'}, {'expression': {'arguments': [{'operandl': {'operandl': {'operandl': {'value': '""Shortest distances from ""'}, 'operator': '+'}, 'operandr': {'value': '"": ""'}, 'operator': '+'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'DijkstraWithoutPriorityQueue'}]}"
DijkstraAlgorithm,Priority-Queue-1,"CompilationUnit(imports=[Import(path=java.util, static=False, wildcard=True)], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6), name=vertices)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=start)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)])]), name=graph)], modifiers=set(), type=BasicType(dimensions=[None, None], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[MemberReference(member=vertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int)), name=distances)], modifiers=set(), type=BasicType(dimensions=[None], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[MemberReference(member=vertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=boolean)), name=visited)], modifiers=set(), type=BasicType(dimensions=[None], name=boolean)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Integer, selectors=[])], member=fill, postfix_operators=[], prefix_operators=[], qualifier=Arrays, selectors=[], type_arguments=None), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=vertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[LambdaExpression(body=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), parameters=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])])], member=comparingInt, postfix_operators=[], prefix_operators=[], qualifier=Comparator, selectors=[], type_arguments=None)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=PriorityQueue, sub_type=None)), name=priorityQueue)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=PriorityQueue, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=priorityQueue, selectors=[], type_arguments=None), label=None), WhileStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=poll, postfix_operators=[], prefix_operators=[], qualifier=priorityQueue, selectors=[], type_arguments=None), name=currentVertex)], modifiers=set(), type=BasicType(dimensions=[], name=int)), StatementExpression(expression=Assignment(expressionl=MemberReference(member=visited, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=currentVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true)), label=None), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=visited, postfix_operators=[], prefix_operators=['!'], qualifier=, selectors=[ArraySelector(index=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=BinaryOperation(operandl=MemberReference(member=graph, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=currentVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=!=), operator=&&), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=currentVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=graph, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=currentVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=+), name=newDistance)], modifiers=set(), type=BasicType(dimensions=[], name=int)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=newDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=MemberReference(member=newDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=priorityQueue, selectors=[], type_arguments=None), label=None)]))]))]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=vertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=nextVertex)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=nextVertex, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)]), condition=MethodInvocation(arguments=[], member=isEmpty, postfix_operators=[], prefix_operators=['!'], qualifier=priorityQueue, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Shortest distances from vertex ""), operandr=MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="":""), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Vertex ""), operandr=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="": ""), operator=+), operandr=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=vertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=DijkstraAlgorithm, type_parameters=None)])","{'imports': [{'path': 'java.util', 'static': False, 'wildcard': True}], 'types': [{'body': [{'body': [{'type': 'int'}, {'type': 'int'}, {'type': 'int'}, {'type': 'int'}, {'type': 'boolean'}, {'expression': {'arguments': [{}, {}]}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'value': '0'}}}, {'type': 'PriorityQueue'}, {'expression': {'arguments': [{}]}}, {'body': {'statements': [{'type': 'int'}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'value': 'true'}}}, {'body': {'statements': [{'condition': {'operandl': {'prefix_operators': [{}], 'selectors': [{}]}, 'operandr': {'operandl': {'selectors': [{}, {}]}, 'operandr': {'value': '0'}, 'operator': '!='}, 'operator': '&&'}, 'then_statement': {'statements': [{'type': 'int'}, {'condition': {'operandr': {'selectors': [{}]}, 'operator': '<'}, 'then_statement': {'statements': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'arguments': [{}]}}]}}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}]}, 'condition': {'prefix_operators': [{}]}}, {'expression': {'arguments': [{'operandl': {'operandl': {'value': '""Shortest distances from vertex ""'}, 'operator': '+'}, 'operandr': {'value': '"":""'}, 'operator': '+'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'operandl': {'value': '""Vertex ""'}, 'operator': '+'}, 'operandr': {'value': '"": ""'}, 'operator': '+'}, 'operandr': {'selectors': [{}]}, 'operator': '+'}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'DijkstraAlgorithm'}]}"
DijkstraAlgorithm,Priority-Queue-2,"CompilationUnit(imports=[Import(path=java.util.Arrays, static=False, wildcard=False), Import(path=java.util.Comparator, static=False, wildcard=False), Import(path=java.util.PriorityQueue, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6), name=vertices)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=start)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)])]), name=graph)], modifiers=set(), type=BasicType(dimensions=[None, None], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[MemberReference(member=vertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int)), name=distances)], modifiers=set(), type=BasicType(dimensions=[None], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[MemberReference(member=vertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=boolean)), name=visited)], modifiers=set(), type=BasicType(dimensions=[None], name=boolean)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Integer, selectors=[])], member=fill, postfix_operators=[], prefix_operators=[], qualifier=Arrays, selectors=[], type_arguments=None), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=vertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[LambdaExpression(body=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), parameters=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])])], member=comparingInt, postfix_operators=[], prefix_operators=[], qualifier=Comparator, selectors=[], type_arguments=None)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=PriorityQueue, sub_type=None)), name=priorityQueue)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=PriorityQueue, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=priorityQueue, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=graph, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=vertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=visited, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=priorityQueue, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=dijkstra, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=vertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=printShortestDistances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[WhileStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=poll, postfix_operators=[], prefix_operators=[], qualifier=priorityQueue, selectors=[], type_arguments=None), name=currentVertex)], modifiers=set(), type=BasicType(dimensions=[], name=int)), StatementExpression(expression=Assignment(expressionl=MemberReference(member=visited, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=currentVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true)), label=None), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=visited, postfix_operators=[], prefix_operators=['!'], qualifier=, selectors=[ArraySelector(index=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=BinaryOperation(operandl=MemberReference(member=graph, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=currentVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=!=), operator=&&), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=currentVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=graph, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=currentVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=+), name=newDistance)], modifiers=set(), type=BasicType(dimensions=[], name=int)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=newDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=MemberReference(member=newDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=priorityQueue, selectors=[], type_arguments=None), label=None)]))]))]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=vertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=nextVertex)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=nextVertex, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)]), condition=MethodInvocation(arguments=[], member=isEmpty, postfix_operators=[], prefix_operators=['!'], qualifier=priorityQueue, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'private', 'static'}, name=dijkstra, parameters=[FormalParameter(annotations=[], modifiers=set(), name=graph, type=BasicType(dimensions=[None, None], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=start, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=vertices, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=distances, type=BasicType(dimensions=[None], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=visited, type=BasicType(dimensions=[None], name=boolean), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=priorityQueue, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=PriorityQueue, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Shortest distances from vertex ""), operandr=MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="":""), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Vertex ""), operandr=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="": ""), operator=+), operandr=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=vertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)], documentation=None, modifiers={'private', 'static'}, name=printShortestDistances, parameters=[FormalParameter(annotations=[], modifiers=set(), name=start, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=vertices, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=distances, type=BasicType(dimensions=[None], name=int), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=DijkstraAlgorithm, type_parameters=None)])","{'imports': [{'path': 'java.util.Arrays', 'static': False, 'wildcard': False}, {'path': 'java.util.Comparator', 'static': False, 'wildcard': False}, {'path': 'java.util.PriorityQueue', 'static': False, 'wildcard': False}], 'types': [{'body': [{'body': [{'type': 'int'}, {'type': 'int'}, {'type': 'int'}, {'type': 'int'}, {'type': 'boolean'}, {'expression': {'arguments': [{}, {}]}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'value': '0'}}}, {'type': 'PriorityQueue'}, {'expression': {'arguments': [{}]}}, {'expression': {'arguments': [{}, {}, {}, {}, {}, {}]}}, {'expression': {'arguments': [{}, {}, {}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}, {'body': [{'body': {'statements': [{'type': 'int'}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'value': 'true'}}}, {'body': {'statements': [{'condition': {'operandl': {'prefix_operators': [{}], 'selectors': [{}]}, 'operandr': {'operandl': {'selectors': [{}, {}]}, 'operandr': {'value': '0'}, 'operator': '!='}, 'operator': '&&'}, 'then_statement': {'statements': [{'type': 'int'}, {'condition': {'operandr': {'selectors': [{}]}, 'operator': '<'}, 'then_statement': {'statements': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'arguments': [{}]}}]}}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}]}, 'condition': {'prefix_operators': [{}]}}], 'name': 'dijkstra', 'parameters': [{'dimensions': [{}, {}], 'name': 'int'}, {'name': 'int'}, {'name': 'int'}, {'dimensions': [{}], 'name': 'int'}, {'dimensions': [{}], 'name': 'boolean'}, {'arguments': [{'type': 'Integer'}], 'name': 'PriorityQueue'}]}, {'body': [{'expression': {'arguments': [{'operandl': {'operandl': {'value': '""Shortest distances from vertex ""'}, 'operator': '+'}, 'operandr': {'value': '"":""'}, 'operator': '+'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'operandl': {'value': '""Vertex ""'}, 'operator': '+'}, 'operandr': {'value': '"": ""'}, 'operator': '+'}, 'operandr': {'selectors': [{}]}, 'operator': '+'}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}], 'name': 'printShortestDistances', 'parameters': [{'name': 'int'}, {'name': 'int'}, {'dimensions': [{}], 'name': 'int'}]}], 'name': 'DijkstraAlgorithm'}]}"
DijkstraAlgorithm,Priority-Queue-3,"CompilationUnit(imports=[Import(path=java.util.Arrays, static=False, wildcard=False), Import(path=java.util.Comparator, static=False, wildcard=False), Import(path=java.util.PriorityQueue, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), name=vertices)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=start)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)])]), name=graph)], modifiers=set(), type=BasicType(dimensions=[None, None], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[MemberReference(member=vertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int)), name=distances)], modifiers=set(), type=BasicType(dimensions=[None], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[MemberReference(member=vertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=boolean)), name=visited)], modifiers=set(), type=BasicType(dimensions=[None], name=boolean)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Integer, selectors=[])], member=fill, postfix_operators=[], prefix_operators=[], qualifier=Arrays, selectors=[], type_arguments=None), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=vertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[LambdaExpression(body=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), parameters=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])])], member=comparingInt, postfix_operators=[], prefix_operators=[], qualifier=Comparator, selectors=[], type_arguments=None)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=PriorityQueue, sub_type=None)), name=priorityQueue)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=PriorityQueue, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=priorityQueue, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=graph, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=vertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=visited, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=priorityQueue, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=dijkstra, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=vertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=printShortestDistances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[WhileStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=poll, postfix_operators=[], prefix_operators=[], qualifier=priorityQueue, selectors=[], type_arguments=None), name=currentVertex)], modifiers=set(), type=BasicType(dimensions=[], name=int)), StatementExpression(expression=Assignment(expressionl=MemberReference(member=visited, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=currentVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true)), label=None), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=visited, postfix_operators=[], prefix_operators=['!'], qualifier=, selectors=[ArraySelector(index=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=BinaryOperation(operandl=MemberReference(member=graph, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=currentVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=!=), operator=&&), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=currentVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=graph, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=currentVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=+), name=newDistance)], modifiers=set(), type=BasicType(dimensions=[], name=int)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=newDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=MemberReference(member=newDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=priorityQueue, selectors=[], type_arguments=None), label=None)]))]))]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=vertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=nextVertex)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=nextVertex, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)]), condition=MethodInvocation(arguments=[], member=isEmpty, postfix_operators=[], prefix_operators=['!'], qualifier=priorityQueue, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'private', 'static'}, name=dijkstra, parameters=[FormalParameter(annotations=[], modifiers=set(), name=graph, type=BasicType(dimensions=[None, None], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=start, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=vertices, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=distances, type=BasicType(dimensions=[None], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=visited, type=BasicType(dimensions=[None], name=boolean), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=priorityQueue, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=PriorityQueue, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Shortest distances from vertex ""), operandr=MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="":""), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Vertex ""), operandr=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="": ""), operator=+), operandr=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=vertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)], documentation=None, modifiers={'private', 'static'}, name=printShortestDistances, parameters=[FormalParameter(annotations=[], modifiers=set(), name=start, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=vertices, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=distances, type=BasicType(dimensions=[None], name=int), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=DijkstraAlgorithm, type_parameters=None)])","{'imports': [{'path': 'java.util.Arrays', 'static': False, 'wildcard': False}, {'path': 'java.util.Comparator', 'static': False, 'wildcard': False}, {'path': 'java.util.PriorityQueue', 'static': False, 'wildcard': False}], 'types': [{'body': [{'body': [{'type': 'int'}, {'type': 'int'}, {'type': 'int'}, {'type': 'int'}, {'type': 'boolean'}, {'expression': {'arguments': [{}, {}]}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'value': '0'}}}, {'type': 'PriorityQueue'}, {'expression': {'arguments': [{}]}}, {'expression': {'arguments': [{}, {}, {}, {}, {}, {}]}}, {'expression': {'arguments': [{}, {}, {}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}, {'body': [{'body': {'statements': [{'type': 'int'}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'value': 'true'}}}, {'body': {'statements': [{'condition': {'operandl': {'prefix_operators': [{}], 'selectors': [{}]}, 'operandr': {'operandl': {'selectors': [{}, {}]}, 'operandr': {'value': '0'}, 'operator': '!='}, 'operator': '&&'}, 'then_statement': {'statements': [{'type': 'int'}, {'condition': {'operandr': {'selectors': [{}]}, 'operator': '<'}, 'then_statement': {'statements': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'arguments': [{}]}}]}}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}]}, 'condition': {'prefix_operators': [{}]}}], 'name': 'dijkstra', 'parameters': [{'dimensions': [{}, {}], 'name': 'int'}, {'name': 'int'}, {'name': 'int'}, {'dimensions': [{}], 'name': 'int'}, {'dimensions': [{}], 'name': 'boolean'}, {'arguments': [{'type': 'Integer'}], 'name': 'PriorityQueue'}]}, {'body': [{'expression': {'arguments': [{'operandl': {'operandl': {'value': '""Shortest distances from vertex ""'}, 'operator': '+'}, 'operandr': {'value': '"":""'}, 'operator': '+'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'operandl': {'value': '""Vertex ""'}, 'operator': '+'}, 'operandr': {'value': '"": ""'}, 'operator': '+'}, 'operandr': {'selectors': [{}]}, 'operator': '+'}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}], 'name': 'printShortestDistances', 'parameters': [{'name': 'int'}, {'name': 'int'}, {'dimensions': [{}], 'name': 'int'}]}], 'name': 'DijkstraAlgorithm'}]}"
DijkstraAlgorithm,Priority-Queue-4,"CompilationUnit(imports=[Import(path=java.util.Arrays, static=False, wildcard=False), Import(path=java.util.Comparator, static=False, wildcard=False), Import(path=java.util.PriorityQueue, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), name=vertices)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), name=start)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)])]), name=graph)], modifiers=set(), type=BasicType(dimensions=[None, None], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[MemberReference(member=vertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int)), name=distances)], modifiers=set(), type=BasicType(dimensions=[None], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[MemberReference(member=vertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=boolean)), name=visited)], modifiers=set(), type=BasicType(dimensions=[None], name=boolean)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Integer, selectors=[])], member=fill, postfix_operators=[], prefix_operators=[], qualifier=Arrays, selectors=[], type_arguments=None), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=vertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[LambdaExpression(body=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), parameters=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])])], member=comparingInt, postfix_operators=[], prefix_operators=[], qualifier=Comparator, selectors=[], type_arguments=None)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=PriorityQueue, sub_type=None)), name=priorityQueue)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=PriorityQueue, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=priorityQueue, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=graph, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=vertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=visited, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=priorityQueue, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=dijkstra, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=vertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=printShortestDistances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[WhileStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=poll, postfix_operators=[], prefix_operators=[], qualifier=priorityQueue, selectors=[], type_arguments=None), name=currentVertex)], modifiers=set(), type=BasicType(dimensions=[], name=int)), StatementExpression(expression=Assignment(expressionl=MemberReference(member=visited, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=currentVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true)), label=None), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=visited, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=BinaryOperation(operandl=MemberReference(member=graph, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=currentVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator===), operator=||), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ContinueStatement(goto=None, label=None)])), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=currentVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=graph, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=currentVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=+), name=newDistance)], modifiers=set(), type=BasicType(dimensions=[], name=int)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=newDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=MemberReference(member=newDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=priorityQueue, selectors=[], type_arguments=None), label=None)]))]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=vertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=nextVertex)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=nextVertex, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)]), condition=MethodInvocation(arguments=[], member=isEmpty, postfix_operators=[], prefix_operators=['!'], qualifier=priorityQueue, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'private', 'static'}, name=dijkstra, parameters=[FormalParameter(annotations=[], modifiers=set(), name=graph, type=BasicType(dimensions=[None, None], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=start, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=vertices, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=distances, type=BasicType(dimensions=[None], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=visited, type=BasicType(dimensions=[None], name=boolean), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=priorityQueue, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=PriorityQueue, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Shortest distances from vertex ""), operandr=MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="":""), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Vertex ""), operandr=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="": ""), operator=+), operandr=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=vertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)], documentation=None, modifiers={'private', 'static'}, name=printShortestDistances, parameters=[FormalParameter(annotations=[], modifiers=set(), name=start, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=vertices, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=distances, type=BasicType(dimensions=[None], name=int), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=DijkstraAlgorithm, type_parameters=None)])","{'imports': [{'path': 'java.util.Arrays', 'static': False, 'wildcard': False}, {'path': 'java.util.Comparator', 'static': False, 'wildcard': False}, {'path': 'java.util.PriorityQueue', 'static': False, 'wildcard': False}], 'types': [{'body': [{'body': [{'type': 'int'}, {'type': 'int'}, {'type': 'int'}, {'type': 'int'}, {'type': 'boolean'}, {'expression': {'arguments': [{}, {}]}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'value': '0'}}}, {'type': 'PriorityQueue'}, {'expression': {'arguments': [{}]}}, {'expression': {'arguments': [{}, {}, {}, {}, {}, {}]}}, {'expression': {'arguments': [{}, {}, {}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}, {'body': [{'body': {'statements': [{'type': 'int'}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'value': 'true'}}}, {'body': {'statements': [{'condition': {'operandl': {'selectors': [{}]}, 'operandr': {'operandl': {'selectors': [{}, {}]}, 'operandr': {'value': '0'}, 'operator': '=='}, 'operator': '||'}, 'then_statement': {'statements': [{}]}}, {'type': 'int'}, {'condition': {'operandr': {'selectors': [{}]}, 'operator': '<'}, 'then_statement': {'statements': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'arguments': [{}]}}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}]}, 'condition': {'prefix_operators': [{}]}}], 'name': 'dijkstra', 'parameters': [{'dimensions': [{}, {}], 'name': 'int'}, {'name': 'int'}, {'name': 'int'}, {'dimensions': [{}], 'name': 'int'}, {'dimensions': [{}], 'name': 'boolean'}, {'arguments': [{'type': 'Integer'}], 'name': 'PriorityQueue'}]}, {'body': [{'expression': {'arguments': [{'operandl': {'operandl': {'value': '""Shortest distances from vertex ""'}, 'operator': '+'}, 'operandr': {'value': '"":""'}, 'operator': '+'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'operandl': {'value': '""Vertex ""'}, 'operator': '+'}, 'operandr': {'value': '"": ""'}, 'operator': '+'}, 'operandr': {'selectors': [{}]}, 'operator': '+'}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}], 'name': 'printShortestDistances', 'parameters': [{'name': 'int'}, {'name': 'int'}, {'dimensions': [{}], 'name': 'int'}]}], 'name': 'DijkstraAlgorithm'}]}"
DijkstraAlgorithm,Priority-Queue-5,"CompilationUnit(imports=[Import(path=java.util.Arrays, static=False, wildcard=False), Import(path=java.util.Comparator, static=False, wildcard=False), Import(path=java.util.PriorityQueue, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), name=numVertices)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), name=startVertex)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)])]), name=graph)], modifiers=set(), type=BasicType(dimensions=[None, None], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[MemberReference(member=numVertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int)), name=shortestDistances)], modifiers=set(), type=BasicType(dimensions=[None], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[MemberReference(member=numVertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=boolean)), name=visitedVertices)], modifiers=set(), type=BasicType(dimensions=[None], name=boolean)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=shortestDistances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Integer, selectors=[])], member=fill, postfix_operators=[], prefix_operators=[], qualifier=Arrays, selectors=[], type_arguments=None), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=shortestDistances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=startVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=numVertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[LambdaExpression(body=MemberReference(member=shortestDistances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), parameters=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])])], member=comparingInt, postfix_operators=[], prefix_operators=[], qualifier=Comparator, selectors=[], type_arguments=None)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=PriorityQueue, sub_type=None)), name=priorityQueue)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=PriorityQueue, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=startVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=priorityQueue, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=graph, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=startVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=numVertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=shortestDistances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=visitedVertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=priorityQueue, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=runDijkstra, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=startVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=numVertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=shortestDistances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=printShortestDistances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[WhileStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=poll, postfix_operators=[], prefix_operators=[], qualifier=priorityQueue, selectors=[], type_arguments=None), name=currentVertex)], modifiers=set(), type=BasicType(dimensions=[], name=int)), StatementExpression(expression=Assignment(expressionl=MemberReference(member=visited, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=currentVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true)), label=None), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=visited, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=BinaryOperation(operandl=MemberReference(member=graph, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=currentVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator===), operator=||), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ContinueStatement(goto=None, label=None)])), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=currentVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=graph, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=currentVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=+), name=newDistance)], modifiers=set(), type=BasicType(dimensions=[], name=int)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=newDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=MemberReference(member=newDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=priorityQueue, selectors=[], type_arguments=None), label=None)]))]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=nextVertex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=numVertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=nextVertex)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=nextVertex, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)]), condition=MethodInvocation(arguments=[], member=isEmpty, postfix_operators=[], prefix_operators=['!'], qualifier=priorityQueue, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'private', 'static'}, name=runDijkstra, parameters=[FormalParameter(annotations=[], modifiers=set(), name=graph, type=BasicType(dimensions=[None, None], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=start, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=numVertices, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=distances, type=BasicType(dimensions=[None], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=visited, type=BasicType(dimensions=[None], name=boolean), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=priorityQueue, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=PriorityQueue, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Shortest distances from vertex ""), operandr=MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="":""), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Vertex ""), operandr=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="": ""), operator=+), operandr=MemberReference(member=distances, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=numVertices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)], documentation=None, modifiers={'private', 'static'}, name=printShortestDistances, parameters=[FormalParameter(annotations=[], modifiers=set(), name=start, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=numVertices, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=distances, type=BasicType(dimensions=[None], name=int), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=DijkstraAlgorithm, type_parameters=None)])","{'imports': [{'path': 'java.util.Arrays', 'static': False, 'wildcard': False}, {'path': 'java.util.Comparator', 'static': False, 'wildcard': False}, {'path': 'java.util.PriorityQueue', 'static': False, 'wildcard': False}], 'types': [{'body': [{'body': [{'type': 'int'}, {'type': 'int'}, {'type': 'int'}, {'type': 'int'}, {'type': 'boolean'}, {'expression': {'arguments': [{}, {}]}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'value': '0'}}}, {'type': 'PriorityQueue'}, {'expression': {'arguments': [{}]}}, {'expression': {'arguments': [{}, {}, {}, {}, {}, {}]}}, {'expression': {'arguments': [{}, {}, {}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}, {'body': [{'body': {'statements': [{'type': 'int'}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'value': 'true'}}}, {'body': {'statements': [{'condition': {'operandl': {'selectors': [{}]}, 'operandr': {'operandl': {'selectors': [{}, {}]}, 'operandr': {'value': '0'}, 'operator': '=='}, 'operator': '||'}, 'then_statement': {'statements': [{}]}}, {'type': 'int'}, {'condition': {'operandr': {'selectors': [{}]}, 'operator': '<'}, 'then_statement': {'statements': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'arguments': [{}]}}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}]}, 'condition': {'prefix_operators': [{}]}}], 'name': 'runDijkstra', 'parameters': [{'dimensions': [{}, {}], 'name': 'int'}, {'name': 'int'}, {'name': 'int'}, {'dimensions': [{}], 'name': 'int'}, {'dimensions': [{}], 'name': 'boolean'}, {'arguments': [{'type': 'Integer'}], 'name': 'PriorityQueue'}]}, {'body': [{'expression': {'arguments': [{'operandl': {'operandl': {'value': '""Shortest distances from vertex ""'}, 'operator': '+'}, 'operandr': {'value': '"":""'}, 'operator': '+'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'operandl': {'value': '""Vertex ""'}, 'operator': '+'}, 'operandr': {'value': '"": ""'}, 'operator': '+'}, 'operandr': {'selectors': [{}]}, 'operator': '+'}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}], 'name': 'printShortestDistances', 'parameters': [{'name': 'int'}, {'name': 'int'}, {'dimensions': [{}], 'name': 'int'}]}], 'name': 'DijkstraAlgorithm'}]}"
EulerMethod,Do-While-1,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.2), name=h)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), DoStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]), condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=<), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using do-while loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '+=', 'value': {'operandr': {'operandl': {'operator': '*'}, 'operator': '-'}, 'operator': '*'}}}, {'expression': {'type': '+='}}]}, 'condition': {'operandr': {'value': '2.0'}, 'operator': '<'}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using do-while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,Do-While-10,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.2), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5.0), name=max)], modifiers=set(), type=BasicType(dimensions=[], name=double)), DoStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*), operator=+)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)), label=None)]), condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=max, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using do-while loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandr': {'operandr': {'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}, 'operator': '*'}, 'operator': '+'}}}, {'expression': {'type': '=', 'value': {'operator': '+'}}}]}, 'condition': {'operator': '<'}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using do-while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,Do-While-2,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.2), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), DoStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]), condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=<), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using do-while loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '+=', 'value': {'operandr': {'operandl': {'operator': '*'}, 'operator': '-'}, 'operator': '*'}}}, {'expression': {'type': '+='}}]}, 'condition': {'operandr': {'value': '2.0'}, 'operator': '<'}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using do-while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,Do-While-3,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.7), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), DoStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]), condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=<), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using do-while loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '+=', 'value': {'operandr': {'operandl': {'operator': '*'}, 'operator': '-'}, 'operator': '*'}}}, {'expression': {'type': '+='}}]}, 'condition': {'operandr': {'value': '2.0'}, 'operator': '<'}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using do-while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,Do-While-4,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.2), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), DoStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*), operator=+)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]), condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=<), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using do-while loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandr': {'operandr': {'operandl': {'operator': '*'}, 'operator': '-'}, 'operator': '*'}, 'operator': '+'}}}, {'expression': {'type': '+='}}]}, 'condition': {'operandr': {'value': '2.0'}, 'operator': '<'}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using do-while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,Do-While-5,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.2), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), DoStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]), condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=<), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using do-while loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '+=', 'value': {'operandr': {'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}, 'operator': '*'}}}, {'expression': {'type': '+='}}]}, 'condition': {'operandr': {'value': '2.0'}, 'operator': '<'}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using do-while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,Do-While-6,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.2), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), DoStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*), operator=+)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]), condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=<), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using do-while loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandr': {'operandr': {'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}, 'operator': '*'}, 'operator': '+'}}}, {'expression': {'type': '+='}}]}, 'condition': {'operandr': {'value': '2.0'}, 'operator': '<'}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using do-while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,Do-While-7,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.2), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), DoStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)), label=None)]), condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=<), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using do-while loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '+=', 'value': {'operandr': {'operandl': {'operator': '*'}, 'operator': '-'}, 'operator': '*'}}}, {'expression': {'type': '=', 'value': {'operator': '+'}}}]}, 'condition': {'operandr': {'value': '2.0'}, 'operator': '<'}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using do-while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,Do-While-8,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.2), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), DoStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)), label=None)]), condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=<), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using do-while loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '+=', 'value': {'operandr': {'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}, 'operator': '*'}}}, {'expression': {'type': '=', 'value': {'operator': '+'}}}]}, 'condition': {'operandr': {'value': '2.0'}, 'operator': '<'}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using do-while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,Do-While-9,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.2), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), DoStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*), operator=+)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)), label=None)]), condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=<), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using do-while loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandr': {'operandr': {'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}, 'operator': '*'}, 'operator': '+'}}}, {'expression': {'type': '=', 'value': {'operator': '+'}}}]}, 'condition': {'operandr': {'value': '2.0'}, 'operator': '<'}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using do-while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,For-1,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.2), name=h)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using for loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'body': {'statements': [{'expression': {'type': '+=', 'value': {'operandr': {'operandl': {'operator': '*'}, 'operator': '-'}, 'operator': '*'}}}, {'expression': {'type': '+='}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using for loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,For-2,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.2), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using for loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'body': {'statements': [{'expression': {'type': '+=', 'value': {'operandr': {'operandl': {'operator': '*'}, 'operator': '-'}, 'operator': '*'}}}, {'expression': {'type': '+='}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using for loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,For-3,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using for loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'body': {'statements': [{'expression': {'type': '+=', 'value': {'operandr': {'operandl': {'operator': '*'}, 'operator': '-'}, 'operator': '*'}}}, {'expression': {'type': '+='}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using for loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,For-4,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*), operator=+)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using for loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandr': {'operandr': {'operandl': {'operator': '*'}, 'operator': '-'}, 'operator': '*'}, 'operator': '+'}}}, {'expression': {'type': '+='}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using for loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,For-5,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using for loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'body': {'statements': [{'expression': {'type': '+=', 'value': {'operandr': {'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}, 'operator': '*'}}}, {'expression': {'type': '+='}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using for loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,For-6,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*), operator=+)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using for loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandr': {'operandr': {'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}, 'operator': '*'}, 'operator': '+'}}}, {'expression': {'type': '+='}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using for loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,For-7,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using for loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'body': {'statements': [{'expression': {'type': '+=', 'value': {'operandr': {'operandl': {'operator': '*'}, 'operator': '-'}, 'operator': '*'}}}, {'expression': {'type': '=', 'value': {'operator': '+'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using for loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,For-8,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using for loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'body': {'statements': [{'expression': {'type': '+=', 'value': {'operandr': {'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}, 'operator': '*'}}}, {'expression': {'type': '=', 'value': {'operator': '+'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using for loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,For-9,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*), operator=+)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using for loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandr': {'operandr': {'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}, 'operator': '*'}, 'operator': '+'}}}, {'expression': {'type': '=', 'value': {'operator': '+'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using for loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,Recursion-1,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.2), name=h)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x0)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y0)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=y0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0)], member=solveODEUsingRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=resultRecursion)], modifiers=set(), type=BasicType(dimensions=[], name=double)), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using recursion: ""), operandr=MemberReference(member=resultRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=xMax, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)])), StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), ReturnStatement(expression=MethodInvocation(arguments=[MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=xMax, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=solveODEUsingRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'private', 'static'}, name=solveODEUsingRecursion, parameters=[FormalParameter(annotations=[], modifiers=set(), name=h, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=xMax, type=BasicType(dimensions=[], name=double), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'value': '""Result using recursion: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}, {'body': [{'condition': {'operator': '>='}, 'then_statement': {'statements': [{}]}}, {'expression': {'type': '+=', 'value': {'operandr': {'operandl': {'operator': '*'}, 'operator': '-'}, 'operator': '*'}}}, {'expression': {'type': '+='}}, {'expression': {'arguments': [{}, {}, {}, {}]}}], 'name': 'solveODEUsingRecursion', 'parameters': [{'name': 'double'}, {'name': 'double'}, {'name': 'double'}, {'name': 'double'}], 'return_type': {'name': 'double'}}], 'name': 'EulerMethod'}]}"
EulerMethod,Recursion-10,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x0)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y0)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=y0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7.0)], member=solveODEUsingRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=resultRecursion)], modifiers=set(), type=BasicType(dimensions=[], name=double)), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using recursion: ""), operandr=MemberReference(member=resultRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=initial_x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=max, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=MemberReference(member=initial_y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)])), StatementExpression(expression=Assignment(expressionl=MemberReference(member=initial_y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=initial_y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=initial_x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=initial_y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*), operator=+)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=initial_x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=initial_x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)), label=None), ReturnStatement(expression=MethodInvocation(arguments=[MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=initial_x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=initial_y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=max, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=solveODEUsingRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'private', 'static'}, name=solveODEUsingRecursion, parameters=[FormalParameter(annotations=[], modifiers=set(), name=size, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=initial_x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=initial_y, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=max, type=BasicType(dimensions=[], name=double), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'value': '""Result using recursion: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}, {'body': [{'condition': {'operator': '>='}, 'then_statement': {'statements': [{}]}}, {'expression': {'type': '=', 'value': {'operandr': {'operandr': {'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}, 'operator': '*'}, 'operator': '+'}}}, {'expression': {'type': '=', 'value': {'operator': '+'}}}, {'expression': {'arguments': [{}, {}, {}, {}]}}], 'name': 'solveODEUsingRecursion', 'parameters': [{'name': 'double'}, {'name': 'double'}, {'name': 'double'}, {'name': 'double'}], 'return_type': {'name': 'double'}}], 'name': 'EulerMethod'}]}"
EulerMethod,Recursion-2,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), name=h)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x0)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y0)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=y0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0)], member=solveODEUsingRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=resultRecursion)], modifiers=set(), type=BasicType(dimensions=[], name=double)), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using recursion: ""), operandr=MemberReference(member=resultRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=xMax, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)])), StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), ReturnStatement(expression=MethodInvocation(arguments=[MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=xMax, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=solveODEUsingRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'private', 'static'}, name=solveODEUsingRecursion, parameters=[FormalParameter(annotations=[], modifiers=set(), name=h, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=xMax, type=BasicType(dimensions=[], name=double), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'value': '""Result using recursion: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}, {'body': [{'condition': {'operator': '>='}, 'then_statement': {'statements': [{}]}}, {'expression': {'type': '+=', 'value': {'operandr': {'operandl': {'operator': '*'}, 'operator': '-'}, 'operator': '*'}}}, {'expression': {'type': '+='}}, {'expression': {'arguments': [{}, {}, {}, {}]}}], 'name': 'solveODEUsingRecursion', 'parameters': [{'name': 'double'}, {'name': 'double'}, {'name': 'double'}, {'name': 'double'}], 'return_type': {'name': 'double'}}], 'name': 'EulerMethod'}]}"
EulerMethod,Recursion-3,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x0)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y0)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=y0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0)], member=solveODEUsingRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=resultRecursion)], modifiers=set(), type=BasicType(dimensions=[], name=double)), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using recursion: ""), operandr=MemberReference(member=resultRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=xMax, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)])), StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), ReturnStatement(expression=MethodInvocation(arguments=[MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=xMax, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=solveODEUsingRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'private', 'static'}, name=solveODEUsingRecursion, parameters=[FormalParameter(annotations=[], modifiers=set(), name=h, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=xMax, type=BasicType(dimensions=[], name=double), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'value': '""Result using recursion: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}, {'body': [{'condition': {'operator': '>='}, 'then_statement': {'statements': [{}]}}, {'expression': {'type': '+=', 'value': {'operandr': {'operandl': {'operator': '*'}, 'operator': '-'}, 'operator': '*'}}}, {'expression': {'type': '+='}}, {'expression': {'arguments': [{}, {}, {}, {}]}}], 'name': 'solveODEUsingRecursion', 'parameters': [{'name': 'double'}, {'name': 'double'}, {'name': 'double'}, {'name': 'double'}], 'return_type': {'name': 'double'}}], 'name': 'EulerMethod'}]}"
EulerMethod,Recursion-4,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x0)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y0)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=y0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0)], member=solveODEUsingRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=resultRecursion)], modifiers=set(), type=BasicType(dimensions=[], name=double)), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using recursion: ""), operandr=MemberReference(member=resultRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=xMax, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)])), StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*), operator=+)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), ReturnStatement(expression=MethodInvocation(arguments=[MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=xMax, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=solveODEUsingRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'private', 'static'}, name=solveODEUsingRecursion, parameters=[FormalParameter(annotations=[], modifiers=set(), name=h, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=xMax, type=BasicType(dimensions=[], name=double), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'value': '""Result using recursion: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}, {'body': [{'condition': {'operator': '>='}, 'then_statement': {'statements': [{}]}}, {'expression': {'type': '=', 'value': {'operandr': {'operandr': {'operandl': {'operator': '*'}, 'operator': '-'}, 'operator': '*'}, 'operator': '+'}}}, {'expression': {'type': '+='}}, {'expression': {'arguments': [{}, {}, {}, {}]}}], 'name': 'solveODEUsingRecursion', 'parameters': [{'name': 'double'}, {'name': 'double'}, {'name': 'double'}, {'name': 'double'}], 'return_type': {'name': 'double'}}], 'name': 'EulerMethod'}]}"
EulerMethod,Recursion-5,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x0)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y0)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=y0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4.0)], member=solveODEUsingRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=resultRecursion)], modifiers=set(), type=BasicType(dimensions=[], name=double)), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using recursion: ""), operandr=MemberReference(member=resultRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=xMax, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)])), StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), ReturnStatement(expression=MethodInvocation(arguments=[MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=xMax, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=solveODEUsingRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'private', 'static'}, name=solveODEUsingRecursion, parameters=[FormalParameter(annotations=[], modifiers=set(), name=h, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=xMax, type=BasicType(dimensions=[], name=double), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'value': '""Result using recursion: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}, {'body': [{'condition': {'operator': '>='}, 'then_statement': {'statements': [{}]}}, {'expression': {'type': '+=', 'value': {'operandr': {'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}, 'operator': '*'}}}, {'expression': {'type': '+='}}, {'expression': {'arguments': [{}, {}, {}, {}]}}], 'name': 'solveODEUsingRecursion', 'parameters': [{'name': 'double'}, {'name': 'double'}, {'name': 'double'}, {'name': 'double'}], 'return_type': {'name': 'double'}}], 'name': 'EulerMethod'}]}"
EulerMethod,Recursion-6,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x0)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y0)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=y0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0)], member=solveODEUsingRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=resultRecursion)], modifiers=set(), type=BasicType(dimensions=[], name=double)), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using recursion: ""), operandr=MemberReference(member=resultRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=xMax, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)])), StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*), operator=+)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), ReturnStatement(expression=MethodInvocation(arguments=[MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=xMax, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=solveODEUsingRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'private', 'static'}, name=solveODEUsingRecursion, parameters=[FormalParameter(annotations=[], modifiers=set(), name=h, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=xMax, type=BasicType(dimensions=[], name=double), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'value': '""Result using recursion: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}, {'body': [{'condition': {'operator': '>='}, 'then_statement': {'statements': [{}]}}, {'expression': {'type': '=', 'value': {'operandr': {'operandr': {'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}, 'operator': '*'}, 'operator': '+'}}}, {'expression': {'type': '+='}}, {'expression': {'arguments': [{}, {}, {}, {}]}}], 'name': 'solveODEUsingRecursion', 'parameters': [{'name': 'double'}, {'name': 'double'}, {'name': 'double'}, {'name': 'double'}], 'return_type': {'name': 'double'}}], 'name': 'EulerMethod'}]}"
EulerMethod,Recursion-7,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x0)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y0)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=y0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6.0)], member=solveODEUsingRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=resultRecursion)], modifiers=set(), type=BasicType(dimensions=[], name=double)), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using recursion: ""), operandr=MemberReference(member=resultRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=xMax, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)])), StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)), label=None), ReturnStatement(expression=MethodInvocation(arguments=[MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=xMax, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=solveODEUsingRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'private', 'static'}, name=solveODEUsingRecursion, parameters=[FormalParameter(annotations=[], modifiers=set(), name=h, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=xMax, type=BasicType(dimensions=[], name=double), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'value': '""Result using recursion: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}, {'body': [{'condition': {'operator': '>='}, 'then_statement': {'statements': [{}]}}, {'expression': {'type': '+=', 'value': {'operandr': {'operandl': {'operator': '*'}, 'operator': '-'}, 'operator': '*'}}}, {'expression': {'type': '=', 'value': {'operator': '+'}}}, {'expression': {'arguments': [{}, {}, {}, {}]}}], 'name': 'solveODEUsingRecursion', 'parameters': [{'name': 'double'}, {'name': 'double'}, {'name': 'double'}, {'name': 'double'}], 'return_type': {'name': 'double'}}], 'name': 'EulerMethod'}]}"
EulerMethod,Recursion-8,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x0)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y0)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=y0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0)], member=solveODEUsingRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=resultRecursion)], modifiers=set(), type=BasicType(dimensions=[], name=double)), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using recursion: ""), operandr=MemberReference(member=resultRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=xMax, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)])), StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)), label=None), ReturnStatement(expression=MethodInvocation(arguments=[MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=xMax, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=solveODEUsingRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'private', 'static'}, name=solveODEUsingRecursion, parameters=[FormalParameter(annotations=[], modifiers=set(), name=h, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=xMax, type=BasicType(dimensions=[], name=double), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'value': '""Result using recursion: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}, {'body': [{'condition': {'operator': '>='}, 'then_statement': {'statements': [{}]}}, {'expression': {'type': '+=', 'value': {'operandr': {'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}, 'operator': '*'}}}, {'expression': {'type': '=', 'value': {'operator': '+'}}}, {'expression': {'arguments': [{}, {}, {}, {}]}}], 'name': 'solveODEUsingRecursion', 'parameters': [{'name': 'double'}, {'name': 'double'}, {'name': 'double'}, {'name': 'double'}], 'return_type': {'name': 'double'}}], 'name': 'EulerMethod'}]}"
EulerMethod,Recursion-9,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x0)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y0)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=y0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7.0)], member=solveODEUsingRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=resultRecursion)], modifiers=set(), type=BasicType(dimensions=[], name=double)), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using recursion: ""), operandr=MemberReference(member=resultRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=xMax, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)])), StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*), operator=+)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)), label=None), ReturnStatement(expression=MethodInvocation(arguments=[MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=xMax, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=solveODEUsingRecursion, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'private', 'static'}, name=solveODEUsingRecursion, parameters=[FormalParameter(annotations=[], modifiers=set(), name=h, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=xMax, type=BasicType(dimensions=[], name=double), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'value': '""Result using recursion: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}, {'body': [{'condition': {'operator': '>='}, 'then_statement': {'statements': [{}]}}, {'expression': {'type': '=', 'value': {'operandr': {'operandr': {'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}, 'operator': '*'}, 'operator': '+'}}}, {'expression': {'type': '=', 'value': {'operator': '+'}}}, {'expression': {'arguments': [{}, {}, {}, {}]}}], 'name': 'solveODEUsingRecursion', 'parameters': [{'name': 'double'}, {'name': 'double'}, {'name': 'double'}, {'name': 'double'}], 'return_type': {'name': 'double'}}], 'name': 'EulerMethod'}]}"
EulerMethod,While-1,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.2), name=h)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), WhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]), condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=<), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using while loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '+=', 'value': {'operandr': {'operandl': {'operator': '*'}, 'operator': '-'}, 'operator': '*'}}}, {'expression': {'type': '+='}}]}, 'condition': {'operandr': {'value': '2.0'}, 'operator': '<'}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,While-2,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), name=h)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), WhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]), condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=<), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using while loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '+=', 'value': {'operandr': {'operandl': {'operator': '*'}, 'operator': '-'}, 'operator': '*'}}}, {'expression': {'type': '+='}}]}, 'condition': {'operandr': {'value': '2.0'}, 'operator': '<'}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,While-3,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.2), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), WhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]), condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=<), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using while loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '+=', 'value': {'operandr': {'operandl': {'operator': '*'}, 'operator': '-'}, 'operator': '*'}}}, {'expression': {'type': '+='}}]}, 'condition': {'operandr': {'value': '2.0'}, 'operator': '<'}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,While-4,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.2), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), WhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*), operator=+)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]), condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=<), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using while loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandr': {'operandr': {'operandl': {'operator': '*'}, 'operator': '-'}, 'operator': '*'}, 'operator': '+'}}}, {'expression': {'type': '+='}}]}, 'condition': {'operandr': {'value': '2.0'}, 'operator': '<'}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,While-5,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.2), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), WhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]), condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=<), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using while loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '+=', 'value': {'operandr': {'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}, 'operator': '*'}}}, {'expression': {'type': '+='}}]}, 'condition': {'operandr': {'value': '2.0'}, 'operator': '<'}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,While-6,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.2), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), WhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*), operator=+)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]), condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=<), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using while loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandr': {'operandr': {'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}, 'operator': '*'}, 'operator': '+'}}}, {'expression': {'type': '+='}}]}, 'condition': {'operandr': {'value': '2.0'}, 'operator': '<'}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,While-7,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.2), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), WhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)), label=None)]), condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=<), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using while loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '+=', 'value': {'operandr': {'operandl': {'operator': '*'}, 'operator': '-'}, 'operator': '*'}}}, {'expression': {'type': '=', 'value': {'operator': '+'}}}]}, 'condition': {'operandr': {'value': '2.0'}, 'operator': '<'}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,While-8,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.2), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), WhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)), label=None)]), condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=<), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using while loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '+=', 'value': {'operandr': {'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}, 'operator': '*'}}}, {'expression': {'type': '=', 'value': {'operator': '+'}}}]}, 'condition': {'operandr': {'value': '2.0'}, 'operator': '<'}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
EulerMethod,While-9,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.2), name=size)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=double)), WhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=*), operator=+)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)), label=None)]), condition=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=<), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Result using while loop: ""), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=EulerMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandr': {'operandr': {'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}, 'operator': '*'}, 'operator': '+'}}}, {'expression': {'type': '=', 'value': {'operator': '+'}}}]}, 'condition': {'operandr': {'value': '2.0'}, 'operator': '<'}}, {'expression': {'arguments': [{'operandl': {'value': '""Result using while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'EulerMethod'}]}"
JacobiAlgorithm,For-1,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10)])]), name=A)], modifiers=set(), type=BasicType(dimensions=[None, None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=8), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6)]), name=b)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)]), name=x0)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=A, selectors=[]), name=n)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=double)), name=solution)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), ForStatement(body=BlockStatement(label=None, statements=[ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=sum)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=sum, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=A, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=*)), label=None)]))]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=j)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=j, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=b, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=sum, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operandr=MemberReference(member=A, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=/)), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=arraycopy, postfix_operators=[], prefix_operators=[], qualifier=System, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=iteration, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=iteration)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=iteration, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Solution using for loop (fixed iterations):"")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""x[""), operandr=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""] = ""), operator=+), operandr=MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=solution, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=JacobiAlgorithm, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'type': 'int'}, {'type': 'double'}, {'body': {'statements': [{'body': {'statements': [{'type': 'double'}, {'body': {'statements': [{'condition': {'operator': '!='}, 'then_statement': {'statements': [{'expression': {'type': '+=', 'value': {'operandl': {'selectors': [{}, {}]}, 'operandr': {'selectors': [{}]}, 'operator': '*'}}}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'operandl': {'operandl': {'selectors': [{}]}, 'operator': '-'}, 'operandr': {'selectors': [{}, {}]}, 'operator': '/'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{}, {'value': '0'}, {}, {'value': '0'}, {}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'value': '""Solution using for loop (fixed iterations):""'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'operandl': {'value': '""x[""'}, 'operator': '+'}, 'operandr': {'value': '""] = ""'}, 'operator': '+'}, 'operandr': {'selectors': [{}]}, 'operator': '+'}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'JacobiAlgorithm'}]}"
JacobiAlgorithm,For-2,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10)])]), name=A)], modifiers=set(), type=BasicType(dimensions=[None, None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=8), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6)]), name=b)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)]), name=x0)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=A, selectors=[]), name=n)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=A, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=b, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=jacobiIteration, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=solution)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=arraycopy, postfix_operators=[], prefix_operators=[], qualifier=System, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=iteration, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=iteration)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=iteration, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Solution using Jacobi algorithm (fixed iterations):"")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=printSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=A, selectors=[]), name=n)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=double)), name=solution)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=sum)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=sum, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=A, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=*)), label=None)]))]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=j)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=j, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=b, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=sum, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operandr=MemberReference(member=A, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=/)), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), ReturnStatement(expression=MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'private', 'static'}, name=jacobiIteration, parameters=[FormalParameter(annotations=[], modifiers=set(), name=A, type=BasicType(dimensions=[None, None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=b, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=x0, type=BasicType(dimensions=[None], name=double), varargs=False)], return_type=BasicType(dimensions=[None], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""x[""), operandr=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""] = ""), operator=+), operandr=MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=solution, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)], documentation=None, modifiers={'private', 'static'}, name=printSolution, parameters=[FormalParameter(annotations=[], modifiers=set(), name=solution, type=BasicType(dimensions=[None], name=double), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=JacobiAlgorithm, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'type': 'int'}, {'body': {'statements': [{'type': 'double'}, {'expression': {'arguments': [{}, {'value': '0'}, {}, {'value': '0'}, {}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'value': '""Solution using Jacobi algorithm (fixed iterations):""'}]}}, {'expression': {'arguments': [{}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}, {'body': [{'type': 'int'}, {'type': 'double'}, {'body': {'statements': [{'type': 'double'}, {'body': {'statements': [{'condition': {'operator': '!='}, 'then_statement': {'statements': [{'expression': {'type': '+=', 'value': {'operandl': {'selectors': [{}, {}]}, 'operandr': {'selectors': [{}]}, 'operator': '*'}}}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'operandl': {'operandl': {'selectors': [{}]}, 'operator': '-'}, 'operandr': {'selectors': [{}, {}]}, 'operator': '/'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {}], 'name': 'jacobiIteration', 'parameters': [{'dimensions': [{}, {}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}], 'return_type': {'dimensions': [{}], 'name': 'double'}}, {'body': [{'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'operandl': {'value': '""x[""'}, 'operator': '+'}, 'operandr': {'value': '""] = ""'}, 'operator': '+'}, 'operandr': {'selectors': [{}]}, 'operator': '+'}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}], 'name': 'printSolution', 'parameters': [{'dimensions': [{}], 'name': 'double'}]}], 'name': 'JacobiAlgorithm'}]}"
JacobiAlgorithm,For-3,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10)])]), name=coefficientMatrix)], modifiers=set(), type=BasicType(dimensions=[None, None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=8), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6)]), name=rightHandSide)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)]), name=initialSolution)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=coefficientMatrix, selectors=[]), name=numberOfEquations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=coefficientMatrix, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=rightHandSide, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=initialSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=performJacobiIteration, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=updatedSolution)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=updatedSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=initialSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=arraycopy, postfix_operators=[], prefix_operators=[], qualifier=System, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=iteration, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=iteration)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=iteration, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Solution using Jacobi algorithm (fixed iterations):"")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=initialSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=printSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=coefficientMatrix, selectors=[]), name=numberOfEquations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=double)), name=updatedSolution)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=sum)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=sum, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=coefficientMatrix, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=currentSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=*)), label=None)]))]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=j)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=j, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=updatedSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=rightHandSide, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=sum, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operandr=MemberReference(member=coefficientMatrix, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=/)), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), ReturnStatement(expression=MemberReference(member=updatedSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'private', 'static'}, name=performJacobiIteration, parameters=[FormalParameter(annotations=[], modifiers=set(), name=coefficientMatrix, type=BasicType(dimensions=[None, None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=rightHandSide, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=currentSolution, type=BasicType(dimensions=[None], name=double), varargs=False)], return_type=BasicType(dimensions=[None], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""x[""), operandr=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""] = ""), operator=+), operandr=MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=solution, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)], documentation=None, modifiers={'private', 'static'}, name=printSolution, parameters=[FormalParameter(annotations=[], modifiers=set(), name=solution, type=BasicType(dimensions=[None], name=double), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=JacobiAlgorithm, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'type': 'int'}, {'body': {'statements': [{'type': 'double'}, {'expression': {'arguments': [{}, {'value': '0'}, {}, {'value': '0'}, {}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'value': '""Solution using Jacobi algorithm (fixed iterations):""'}]}}, {'expression': {'arguments': [{}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}, {'body': [{'type': 'int'}, {'type': 'double'}, {'body': {'statements': [{'type': 'double'}, {'body': {'statements': [{'condition': {'operator': '!='}, 'then_statement': {'statements': [{'expression': {'type': '+=', 'value': {'operandl': {'selectors': [{}, {}]}, 'operandr': {'selectors': [{}]}, 'operator': '*'}}}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'operandl': {'operandl': {'selectors': [{}]}, 'operator': '-'}, 'operandr': {'selectors': [{}, {}]}, 'operator': '/'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {}], 'name': 'performJacobiIteration', 'parameters': [{'dimensions': [{}, {}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}], 'return_type': {'dimensions': [{}], 'name': 'double'}}, {'body': [{'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'operandl': {'value': '""x[""'}, 'operator': '+'}, 'operandr': {'value': '""] = ""'}, 'operator': '+'}, 'operandr': {'selectors': [{}]}, 'operator': '+'}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}], 'name': 'printSolution', 'parameters': [{'dimensions': [{}], 'name': 'double'}]}], 'name': 'JacobiAlgorithm'}]}"
JacobiAlgorithm,For-4,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10)])]), name=A)], modifiers=set(), type=BasicType(dimensions=[None, None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=8), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6)]), name=b)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)]), name=x0)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=A, selectors=[]), name=n)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=A, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=b, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=jacobiIteration, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=solution)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=arraycopy, postfix_operators=[], prefix_operators=[], qualifier=System, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=iteration, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=iteration)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=iteration, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Solution using Jacobi algorithm (fixed iterations):"")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=printSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=A, selectors=[]), name=n)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=double)), name=solution)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=sum)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=sum, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=sum, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=A, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=*), operator=+)), label=None)]))]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=j)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=j, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=b, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=sum, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operandr=MemberReference(member=A, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=/)), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), ReturnStatement(expression=MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'private', 'static'}, name=jacobiIteration, parameters=[FormalParameter(annotations=[], modifiers=set(), name=A, type=BasicType(dimensions=[None, None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=b, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=x0, type=BasicType(dimensions=[None], name=double), varargs=False)], return_type=BasicType(dimensions=[None], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""x[""), operandr=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""] = ""), operator=+), operandr=MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=solution, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)], documentation=None, modifiers={'private', 'static'}, name=printSolution, parameters=[FormalParameter(annotations=[], modifiers=set(), name=solution, type=BasicType(dimensions=[None], name=double), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=JacobiAlgorithm, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'type': 'int'}, {'body': {'statements': [{'type': 'double'}, {'expression': {'arguments': [{}, {'value': '0'}, {}, {'value': '0'}, {}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'value': '""Solution using Jacobi algorithm (fixed iterations):""'}]}}, {'expression': {'arguments': [{}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}, {'body': [{'type': 'int'}, {'type': 'double'}, {'body': {'statements': [{'type': 'double'}, {'body': {'statements': [{'condition': {'operator': '!='}, 'then_statement': {'statements': [{'expression': {'type': '=', 'value': {'operandr': {'operandl': {'selectors': [{}, {}]}, 'operandr': {'selectors': [{}]}, 'operator': '*'}, 'operator': '+'}}}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'operandl': {'operandl': {'selectors': [{}]}, 'operator': '-'}, 'operandr': {'selectors': [{}, {}]}, 'operator': '/'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {}], 'name': 'jacobiIteration', 'parameters': [{'dimensions': [{}, {}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}], 'return_type': {'dimensions': [{}], 'name': 'double'}}, {'body': [{'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'operandl': {'value': '""x[""'}, 'operator': '+'}, 'operandr': {'value': '""] = ""'}, 'operator': '+'}, 'operandr': {'selectors': [{}]}, 'operator': '+'}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}], 'name': 'printSolution', 'parameters': [{'dimensions': [{}], 'name': 'double'}]}], 'name': 'JacobiAlgorithm'}]}"
JacobiAlgorithm,For-5,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=8), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6)])]), name=A)], modifiers=set(), type=BasicType(dimensions=[None, None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=9), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5)]), name=b)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), name=x0)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=15), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=A, selectors=[]), name=n)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=A, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=b, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=jacobiIteration, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=solution)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=arraycopy, postfix_operators=[], prefix_operators=[], qualifier=System, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=iteration, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=iteration)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=iteration, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Solution using Jacobi algorithm (fixed iterations):"")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=printSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=A, selectors=[]), name=n)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=double)), name=solution)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=sum)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=sum, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=A, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=*)), label=None)]))]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=j)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=j, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=b, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=sum, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operandr=MemberReference(member=A, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=/)), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), ReturnStatement(expression=MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'private', 'static'}, name=jacobiIteration, parameters=[FormalParameter(annotations=[], modifiers=set(), name=A, type=BasicType(dimensions=[None, None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=b, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=x0, type=BasicType(dimensions=[None], name=double), varargs=False)], return_type=BasicType(dimensions=[None], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""x[""), operandr=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""] = ""), operator=+), operandr=MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=solution, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)], documentation=None, modifiers={'private', 'static'}, name=printSolution, parameters=[FormalParameter(annotations=[], modifiers=set(), name=solution, type=BasicType(dimensions=[None], name=double), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=JacobiAlgorithm, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'type': 'int'}, {'body': {'statements': [{'type': 'double'}, {'expression': {'arguments': [{}, {'value': '0'}, {}, {'value': '0'}, {}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'value': '""Solution using Jacobi algorithm (fixed iterations):""'}]}}, {'expression': {'arguments': [{}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}, {'body': [{'type': 'int'}, {'type': 'double'}, {'body': {'statements': [{'type': 'double'}, {'body': {'statements': [{'condition': {'operator': '!='}, 'then_statement': {'statements': [{'expression': {'type': '+=', 'value': {'operandl': {'selectors': [{}, {}]}, 'operandr': {'selectors': [{}]}, 'operator': '*'}}}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'operandl': {'operandl': {'selectors': [{}]}, 'operator': '-'}, 'operandr': {'selectors': [{}, {}]}, 'operator': '/'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {}], 'name': 'jacobiIteration', 'parameters': [{'dimensions': [{}, {}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}], 'return_type': {'dimensions': [{}], 'name': 'double'}}, {'body': [{'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'operandl': {'value': '""x[""'}, 'operator': '+'}, 'operandr': {'value': '""] = ""'}, 'operator': '+'}, 'operandr': {'selectors': [{}]}, 'operator': '+'}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}], 'name': 'printSolution', 'parameters': [{'dimensions': [{}], 'name': 'double'}]}], 'name': 'JacobiAlgorithm'}]}"
JacobiAlgorithm,While-1,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10)])]), name=A)], modifiers=set(), type=BasicType(dimensions=[None, None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=8), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6)]), name=b)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)]), name=x0)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0001), name=epsilon)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=A, selectors=[]), name=n)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=double)), name=solution)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), WhileStatement(body=BlockStatement(label=None, statements=[ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=sum)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=sum, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=A, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=*)), label=None)]))]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=j)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=j, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=b, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=sum, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operandr=MemberReference(member=A, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=/)), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true)), label=None), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=epsilon, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false)), label=None), BreakStatement(goto=None, label=None)]))]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=arraycopy, postfix_operators=[], prefix_operators=[], qualifier=System, selectors=[], type_arguments=None), label=None)]), condition=MemberReference(member=converged, postfix_operators=[], prefix_operators=['!'], qualifier=, selectors=[]), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Solution using while loop:"")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""x[""), operandr=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""] = ""), operator=+), operandr=MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=solution, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=JacobiAlgorithm, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'type': 'double'}, {'type': 'boolean'}, {'body': {'statements': [{'body': {'statements': [{'type': 'double'}, {'body': {'statements': [{'condition': {'operator': '!='}, 'then_statement': {'statements': [{'expression': {'type': '+=', 'value': {'operandl': {'selectors': [{}, {}]}, 'operandr': {'selectors': [{}]}, 'operator': '*'}}}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'operandl': {'operandl': {'selectors': [{}]}, 'operator': '-'}, 'operandr': {'selectors': [{}, {}]}, 'operator': '/'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'type': '=', 'value': {'value': 'true'}}}, {'body': {'statements': [{'condition': {'operandl': {'arguments': [{'operandl': {'selectors': [{}]}, 'operandr': {'selectors': [{}]}, 'operator': '-'}]}, 'operator': '>'}, 'then_statement': {'statements': [{'expression': {'type': '=', 'value': {'value': 'false'}}}, {}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{}, {'value': '0'}, {}, {'value': '0'}, {}]}}]}, 'condition': {'prefix_operators': [{}]}}, {'expression': {'arguments': [{'value': '""Solution using while loop:""'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'operandl': {'value': '""x[""'}, 'operator': '+'}, 'operandr': {'value': '""] = ""'}, 'operator': '+'}, 'operandr': {'selectors': [{}]}, 'operator': '+'}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'JacobiAlgorithm'}]}"
JacobiAlgorithm,While-2,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10)])]), name=A)], modifiers=set(), type=BasicType(dimensions=[None, None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=8), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6)]), name=b)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)]), name=x0)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0001), name=epsilon)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=A, selectors=[]), name=n)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=double)), name=solution)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), WhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=A, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=b, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=performJacobiIteration, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=updateSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)]), condition=MethodInvocation(arguments=[MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=epsilon, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=hasConverged, postfix_operators=[], prefix_operators=['!'], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Solution using while loop:"")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=printSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=A, selectors=[]), name=n)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=sum)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=sum, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=A, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=*)), label=None)]))]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=j)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=j, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=b, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=sum, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operandr=MemberReference(member=A, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=/)), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)], documentation=None, modifiers={'private', 'static'}, name=performJacobiIteration, parameters=[FormalParameter(annotations=[], modifiers=set(), name=A, type=BasicType(dimensions=[None, None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=b, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=x0, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=solution, type=BasicType(dimensions=[None], name=double), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=arraycopy, postfix_operators=[], prefix_operators=[], qualifier=System, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'private', 'static'}, name=updateSolution, parameters=[FormalParameter(annotations=[], modifiers=set(), name=x0, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=solution, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=n, type=BasicType(dimensions=[], name=int), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=x0, selectors=[]), name=n)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=epsilon, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)]))]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), label=None)], documentation=None, modifiers={'private', 'static'}, name=hasConverged, parameters=[FormalParameter(annotations=[], modifiers=set(), name=x0, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=solution, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=epsilon, type=BasicType(dimensions=[], name=double), varargs=False)], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""x[""), operandr=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""] = ""), operator=+), operandr=MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=solution, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)], documentation=None, modifiers={'private', 'static'}, name=printSolution, parameters=[FormalParameter(annotations=[], modifiers=set(), name=solution, type=BasicType(dimensions=[None], name=double), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=JacobiAlgorithm, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'arguments': [{}, {}, {}, {}]}}, {'expression': {'arguments': [{}, {}, {}]}}]}, 'condition': {'arguments': [{}, {}, {}], 'prefix_operators': [{}]}}, {'expression': {'arguments': [{'value': '""Solution using while loop:""'}]}}, {'expression': {'arguments': [{}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}, {'body': [{'type': 'int'}, {'body': {'statements': [{'type': 'double'}, {'body': {'statements': [{'condition': {'operator': '!='}, 'then_statement': {'statements': [{'expression': {'type': '+=', 'value': {'operandl': {'selectors': [{}, {}]}, 'operandr': {'selectors': [{}]}, 'operator': '*'}}}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'operandl': {'operandl': {'selectors': [{}]}, 'operator': '-'}, 'operandr': {'selectors': [{}, {}]}, 'operator': '/'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}], 'name': 'performJacobiIteration', 'parameters': [{'dimensions': [{}, {}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}]}, {'body': [{'expression': {'arguments': [{}, {'value': '0'}, {}, {'value': '0'}, {}]}}], 'name': 'updateSolution', 'parameters': [{'dimensions': [{}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}, {'name': 'int'}]}, {'body': [{'type': 'int'}, {'body': {'statements': [{'condition': {'operandl': {'arguments': [{'operandl': {'selectors': [{}]}, 'operandr': {'selectors': [{}]}, 'operator': '-'}]}, 'operator': '>'}, 'then_statement': {'statements': [{'expression': {'value': 'false'}}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'value': 'true'}}], 'name': 'hasConverged', 'parameters': [{'dimensions': [{}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}, {'name': 'double'}], 'return_type': {'name': 'boolean'}}, {'body': [{'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'operandl': {'value': '""x[""'}, 'operator': '+'}, 'operandr': {'value': '""] = ""'}, 'operator': '+'}, 'operandr': {'selectors': [{}]}, 'operator': '+'}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}], 'name': 'printSolution', 'parameters': [{'dimensions': [{}], 'name': 'double'}]}], 'name': 'JacobiAlgorithm'}]}"
JacobiAlgorithm,While-3,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10)])]), name=coefficientMatrix)], modifiers=set(), type=BasicType(dimensions=[None, None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=8), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6)]), name=rightHandSide)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)]), name=initialSolution)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0001), name=epsilon)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=coefficientMatrix, selectors=[]), name=numberOfEquations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=double)), name=solution)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), WhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=coefficientMatrix, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=rightHandSide, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=initialSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=performJacobiIteration, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=initialSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=updateSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)]), condition=MethodInvocation(arguments=[MemberReference(member=initialSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=epsilon, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=hasConverged, postfix_operators=[], prefix_operators=['!'], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Solution using Jacobi algorithm (while loop):"")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=printSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=coefficientMatrix, selectors=[]), name=numberOfEquations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=sum)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=sum, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=coefficientMatrix, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=currentSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=*)), label=None)]))]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=j)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=j, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=updatedSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=rightHandSide, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=sum, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operandr=MemberReference(member=coefficientMatrix, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=/)), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)], documentation=None, modifiers={'private', 'static'}, name=performJacobiIteration, parameters=[FormalParameter(annotations=[], modifiers=set(), name=coefficientMatrix, type=BasicType(dimensions=[None, None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=rightHandSide, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=currentSolution, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=updatedSolution, type=BasicType(dimensions=[None], name=double), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=updatedSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=currentSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=arraycopy, postfix_operators=[], prefix_operators=[], qualifier=System, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'private', 'static'}, name=updateSolution, parameters=[FormalParameter(annotations=[], modifiers=set(), name=currentSolution, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=updatedSolution, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=numberOfEquations, type=BasicType(dimensions=[], name=int), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=currentSolution, selectors=[]), name=numberOfEquations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=MemberReference(member=updatedSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=currentSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=epsilon, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)]))]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), label=None)], documentation=None, modifiers={'private', 'static'}, name=hasConverged, parameters=[FormalParameter(annotations=[], modifiers=set(), name=currentSolution, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=updatedSolution, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=epsilon, type=BasicType(dimensions=[], name=double), varargs=False)], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""x[""), operandr=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""] = ""), operator=+), operandr=MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=solution, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)], documentation=None, modifiers={'private', 'static'}, name=printSolution, parameters=[FormalParameter(annotations=[], modifiers=set(), name=solution, type=BasicType(dimensions=[None], name=double), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=JacobiAlgorithm, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'arguments': [{}, {}, {}, {}]}}, {'expression': {'arguments': [{}, {}, {}]}}]}, 'condition': {'arguments': [{}, {}, {}], 'prefix_operators': [{}]}}, {'expression': {'arguments': [{'value': '""Solution using Jacobi algorithm (while loop):""'}]}}, {'expression': {'arguments': [{}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}, {'body': [{'type': 'int'}, {'body': {'statements': [{'type': 'double'}, {'body': {'statements': [{'condition': {'operator': '!='}, 'then_statement': {'statements': [{'expression': {'type': '+=', 'value': {'operandl': {'selectors': [{}, {}]}, 'operandr': {'selectors': [{}]}, 'operator': '*'}}}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'operandl': {'operandl': {'selectors': [{}]}, 'operator': '-'}, 'operandr': {'selectors': [{}, {}]}, 'operator': '/'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}], 'name': 'performJacobiIteration', 'parameters': [{'dimensions': [{}, {}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}]}, {'body': [{'expression': {'arguments': [{}, {'value': '0'}, {}, {'value': '0'}, {}]}}], 'name': 'updateSolution', 'parameters': [{'dimensions': [{}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}, {'name': 'int'}]}, {'body': [{'type': 'int'}, {'body': {'statements': [{'condition': {'operandl': {'arguments': [{'operandl': {'selectors': [{}]}, 'operandr': {'selectors': [{}]}, 'operator': '-'}]}, 'operator': '>'}, 'then_statement': {'statements': [{'expression': {'value': 'false'}}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'value': 'true'}}], 'name': 'hasConverged', 'parameters': [{'dimensions': [{}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}, {'name': 'double'}], 'return_type': {'name': 'boolean'}}, {'body': [{'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'operandl': {'value': '""x[""'}, 'operator': '+'}, 'operandr': {'value': '""] = ""'}, 'operator': '+'}, 'operandr': {'selectors': [{}]}, 'operator': '+'}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}], 'name': 'printSolution', 'parameters': [{'dimensions': [{}], 'name': 'double'}]}], 'name': 'JacobiAlgorithm'}]}"
JacobiAlgorithm,While-4,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=9), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7)])]), name=coefficientMatrix)], modifiers=set(), type=BasicType(dimensions=[None, None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=11), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=8)]), name=rightHandSide)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), name=initialSolution)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.00001), name=epsilon)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=coefficientMatrix, selectors=[]), name=numberOfEquations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=double)), name=solution)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), WhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=coefficientMatrix, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=rightHandSide, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=initialSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=performJacobiIteration, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=initialSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=updateSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)]), condition=MethodInvocation(arguments=[MemberReference(member=initialSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=epsilon, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=hasConverged, postfix_operators=[], prefix_operators=['!'], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Solution using Jacobi algorithm (while loop):"")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=printSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=coefficientMatrix, selectors=[]), name=numberOfEquations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=sum)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=sum, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=sum, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=coefficientMatrix, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=currentSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=*), operator=+)), label=None)]))]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=j)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=j, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=updatedSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=rightHandSide, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=sum, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operandr=MemberReference(member=coefficientMatrix, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=/)), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)], documentation=None, modifiers={'private', 'static'}, name=performJacobiIteration, parameters=[FormalParameter(annotations=[], modifiers=set(), name=coefficientMatrix, type=BasicType(dimensions=[None, None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=rightHandSide, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=currentSolution, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=updatedSolution, type=BasicType(dimensions=[None], name=double), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=updatedSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=currentSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=arraycopy, postfix_operators=[], prefix_operators=[], qualifier=System, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'private', 'static'}, name=updateSolution, parameters=[FormalParameter(annotations=[], modifiers=set(), name=currentSolution, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=updatedSolution, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=numberOfEquations, type=BasicType(dimensions=[], name=int), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=currentSolution, selectors=[]), name=numberOfEquations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=MemberReference(member=updatedSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=currentSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=epsilon, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)]))]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), label=None)], documentation=None, modifiers={'private', 'static'}, name=hasConverged, parameters=[FormalParameter(annotations=[], modifiers=set(), name=currentSolution, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=updatedSolution, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=epsilon, type=BasicType(dimensions=[], name=double), varargs=False)], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""x[""), operandr=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""] = ""), operator=+), operandr=MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=solution, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)], documentation=None, modifiers={'private', 'static'}, name=printSolution, parameters=[FormalParameter(annotations=[], modifiers=set(), name=solution, type=BasicType(dimensions=[None], name=double), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=JacobiAlgorithm, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'arguments': [{}, {}, {}, {}]}}, {'expression': {'arguments': [{}, {}, {}]}}]}, 'condition': {'arguments': [{}, {}, {}], 'prefix_operators': [{}]}}, {'expression': {'arguments': [{'value': '""Solution using Jacobi algorithm (while loop):""'}]}}, {'expression': {'arguments': [{}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}, {'body': [{'type': 'int'}, {'body': {'statements': [{'type': 'double'}, {'body': {'statements': [{'condition': {'operator': '!='}, 'then_statement': {'statements': [{'expression': {'type': '=', 'value': {'operandr': {'operandl': {'selectors': [{}, {}]}, 'operandr': {'selectors': [{}]}, 'operator': '*'}, 'operator': '+'}}}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'operandl': {'operandl': {'selectors': [{}]}, 'operator': '-'}, 'operandr': {'selectors': [{}, {}]}, 'operator': '/'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}], 'name': 'performJacobiIteration', 'parameters': [{'dimensions': [{}, {}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}]}, {'body': [{'expression': {'arguments': [{}, {'value': '0'}, {}, {'value': '0'}, {}]}}], 'name': 'updateSolution', 'parameters': [{'dimensions': [{}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}, {'name': 'int'}]}, {'body': [{'type': 'int'}, {'body': {'statements': [{'condition': {'operandl': {'arguments': [{'operandl': {'selectors': [{}]}, 'operandr': {'selectors': [{}]}, 'operator': '-'}]}, 'operator': '>'}, 'then_statement': {'statements': [{'expression': {'value': 'false'}}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'value': 'true'}}], 'name': 'hasConverged', 'parameters': [{'dimensions': [{}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}, {'name': 'double'}], 'return_type': {'name': 'boolean'}}, {'body': [{'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'operandl': {'value': '""x[""'}, 'operator': '+'}, 'operandr': {'value': '""] = ""'}, 'operator': '+'}, 'operandr': {'selectors': [{}]}, 'operator': '+'}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}], 'name': 'printSolution', 'parameters': [{'dimensions': [{}], 'name': 'double'}]}], 'name': 'JacobiAlgorithm'}]}"
JacobiAlgorithm,While-5,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=9), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7)])]), name=coefficientMatrix)], modifiers=set(), type=BasicType(dimensions=[None, None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=11), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=8)]), name=rightHandSide)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), name=initialSolution)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.00001), name=epsilon)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=coefficientMatrix, selectors=[]), name=numberOfEquations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=double)), name=solution)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), WhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=coefficientMatrix, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=rightHandSide, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=initialSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=performJacobiIteration, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=initialSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=updateSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)]), condition=MethodInvocation(arguments=[MemberReference(member=initialSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=epsilon, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=hasConverged, postfix_operators=[], prefix_operators=['!'], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Solution using Jacobi algorithm (while loop):"")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=printSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=coefficientMatrix, selectors=[]), name=numberOfEquations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=sum)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=sum, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MemberReference(member=coefficientMatrix, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=currentSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=*)), label=None)]))]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=j)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=j, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=updatedSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=rightHandSide, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=coefficientMatrix, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=/), operandr=BinaryOperation(operandl=MemberReference(member=sum, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=coefficientMatrix, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=/), operator=-)), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)], documentation=None, modifiers={'private', 'static'}, name=performJacobiIteration, parameters=[FormalParameter(annotations=[], modifiers=set(), name=coefficientMatrix, type=BasicType(dimensions=[None, None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=rightHandSide, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=currentSolution, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=updatedSolution, type=BasicType(dimensions=[None], name=double), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=updatedSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=currentSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=arraycopy, postfix_operators=[], prefix_operators=[], qualifier=System, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'private', 'static'}, name=updateSolution, parameters=[FormalParameter(annotations=[], modifiers=set(), name=currentSolution, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=updatedSolution, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=numberOfEquations, type=BasicType(dimensions=[], name=int), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=currentSolution, selectors=[]), name=numberOfEquations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=MemberReference(member=updatedSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=currentSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=epsilon, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)]))]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), label=None)], documentation=None, modifiers={'private', 'static'}, name=hasConverged, parameters=[FormalParameter(annotations=[], modifiers=set(), name=currentSolution, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=updatedSolution, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=epsilon, type=BasicType(dimensions=[], name=double), varargs=False)], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""x[""), operandr=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""] = ""), operator=+), operandr=MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=solution, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)], documentation=None, modifiers={'private', 'static'}, name=printSolution, parameters=[FormalParameter(annotations=[], modifiers=set(), name=solution, type=BasicType(dimensions=[None], name=double), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=JacobiAlgorithm, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'arguments': [{}, {}, {}, {}]}}, {'expression': {'arguments': [{}, {}, {}]}}]}, 'condition': {'arguments': [{}, {}, {}], 'prefix_operators': [{}]}}, {'expression': {'arguments': [{'value': '""Solution using Jacobi algorithm (while loop):""'}]}}, {'expression': {'arguments': [{}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}, {'body': [{'type': 'int'}, {'body': {'statements': [{'type': 'double'}, {'body': {'statements': [{'condition': {'operator': '!='}, 'then_statement': {'statements': [{'expression': {'type': '+=', 'value': {'operandl': {'selectors': [{}, {}]}, 'operandr': {'selectors': [{}]}, 'operator': '*'}}}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'operandl': {'operandl': {'selectors': [{}]}, 'operandr': {'selectors': [{}, {}]}, 'operator': '/'}, 'operandr': {'operandr': {'selectors': [{}, {}]}, 'operator': '/'}, 'operator': '-'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}], 'name': 'performJacobiIteration', 'parameters': [{'dimensions': [{}, {}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}]}, {'body': [{'expression': {'arguments': [{}, {'value': '0'}, {}, {'value': '0'}, {}]}}], 'name': 'updateSolution', 'parameters': [{'dimensions': [{}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}, {'name': 'int'}]}, {'body': [{'type': 'int'}, {'body': {'statements': [{'condition': {'operandl': {'arguments': [{'operandl': {'selectors': [{}]}, 'operandr': {'selectors': [{}]}, 'operator': '-'}]}, 'operator': '>'}, 'then_statement': {'statements': [{'expression': {'value': 'false'}}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'value': 'true'}}], 'name': 'hasConverged', 'parameters': [{'dimensions': [{}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}, {'name': 'double'}], 'return_type': {'name': 'boolean'}}, {'body': [{'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'operandl': {'value': '""x[""'}, 'operator': '+'}, 'operandr': {'value': '""] = ""'}, 'operator': '+'}, 'operandr': {'selectors': [{}]}, 'operator': '+'}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}], 'name': 'printSolution', 'parameters': [{'dimensions': [{}], 'name': 'double'}]}], 'name': 'JacobiAlgorithm'}]}"
JacobiAlgorithm,While-6,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=9), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)]), ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7)])]), name=coefficientMatrix)], modifiers=set(), type=BasicType(dimensions=[None, None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=11), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=8)]), name=rightHandSide)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), name=initialSolution)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.00001), name=epsilon)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=coefficientMatrix, selectors=[]), name=numberOfEquations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=double)), name=solution)], modifiers=set(), type=BasicType(dimensions=[None], name=double)), WhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=coefficientMatrix, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=rightHandSide, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=initialSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=performJacobiIteration, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=initialSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=updateSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)]), condition=MethodInvocation(arguments=[MemberReference(member=initialSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=epsilon, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=hasConverged, postfix_operators=[], prefix_operators=['!'], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Solution using Jacobi algorithm (while loop):"")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=printSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=coefficientMatrix, selectors=[]), name=numberOfEquations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=sum)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=sum, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=sum, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=coefficientMatrix, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=currentSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=*), operator=+)), label=None)]))]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=j)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=j, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=updatedSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=rightHandSide, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=coefficientMatrix, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=/), operandr=BinaryOperation(operandl=MemberReference(member=sum, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=coefficientMatrix, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=/), operator=-)), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)], documentation=None, modifiers={'private', 'static'}, name=performJacobiIteration, parameters=[FormalParameter(annotations=[], modifiers=set(), name=coefficientMatrix, type=BasicType(dimensions=[None, None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=rightHandSide, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=currentSolution, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=updatedSolution, type=BasicType(dimensions=[None], name=double), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=updatedSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=currentSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=arraycopy, postfix_operators=[], prefix_operators=[], qualifier=System, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'private', 'static'}, name=updateSolution, parameters=[FormalParameter(annotations=[], modifiers=set(), name=currentSolution, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=updatedSolution, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=numberOfEquations, type=BasicType(dimensions=[], name=int), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=currentSolution, selectors=[]), name=numberOfEquations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=MemberReference(member=updatedSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=currentSolution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=epsilon, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)]))]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=numberOfEquations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), label=None)], documentation=None, modifiers={'private', 'static'}, name=hasConverged, parameters=[FormalParameter(annotations=[], modifiers=set(), name=currentSolution, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=updatedSolution, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=epsilon, type=BasicType(dimensions=[], name=double), varargs=False)], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""x[""), operandr=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""] = ""), operator=+), operandr=MemberReference(member=solution, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=solution, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)], documentation=None, modifiers={'private', 'static'}, name=printSolution, parameters=[FormalParameter(annotations=[], modifiers=set(), name=solution, type=BasicType(dimensions=[None], name=double), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=JacobiAlgorithm, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'arguments': [{}, {}, {}, {}]}}, {'expression': {'arguments': [{}, {}, {}]}}]}, 'condition': {'arguments': [{}, {}, {}], 'prefix_operators': [{}]}}, {'expression': {'arguments': [{'value': '""Solution using Jacobi algorithm (while loop):""'}]}}, {'expression': {'arguments': [{}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}, {'body': [{'type': 'int'}, {'body': {'statements': [{'type': 'double'}, {'body': {'statements': [{'condition': {'operator': '!='}, 'then_statement': {'statements': [{'expression': {'type': '=', 'value': {'operandr': {'operandl': {'selectors': [{}, {}]}, 'operandr': {'selectors': [{}]}, 'operator': '*'}, 'operator': '+'}}}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'operandl': {'operandl': {'selectors': [{}]}, 'operandr': {'selectors': [{}, {}]}, 'operator': '/'}, 'operandr': {'operandr': {'selectors': [{}, {}]}, 'operator': '/'}, 'operator': '-'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}], 'name': 'performJacobiIteration', 'parameters': [{'dimensions': [{}, {}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}]}, {'body': [{'expression': {'arguments': [{}, {'value': '0'}, {}, {'value': '0'}, {}]}}], 'name': 'updateSolution', 'parameters': [{'dimensions': [{}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}, {'name': 'int'}]}, {'body': [{'type': 'int'}, {'body': {'statements': [{'condition': {'operandl': {'arguments': [{'operandl': {'selectors': [{}]}, 'operandr': {'selectors': [{}]}, 'operator': '-'}]}, 'operator': '>'}, 'then_statement': {'statements': [{'expression': {'value': 'false'}}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'value': 'true'}}], 'name': 'hasConverged', 'parameters': [{'dimensions': [{}], 'name': 'double'}, {'dimensions': [{}], 'name': 'double'}, {'name': 'double'}], 'return_type': {'name': 'boolean'}}, {'body': [{'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'operandl': {'value': '""x[""'}, 'operator': '+'}, 'operandr': {'value': '""] = ""'}, 'operator': '+'}, 'operandr': {'selectors': [{}]}, 'operator': '+'}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}], 'name': 'printSolution', 'parameters': [{'dimensions': [{}], 'name': 'double'}]}], 'name': 'JacobiAlgorithm'}]}"
KMeans,For-1,"CompilationUnit(imports=[Import(path=java.util.ArrayList, static=False, wildcard=False), Import(path=java.util.List, static=False, wildcard=False), Import(path=java.util.Random, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=dataPoints)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), name=k)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=clusters)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Random, sub_type=None)), name=random)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Random, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Cluster, sub_type=None)), name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None)], member=nextInt, postfix_operators=[], prefix_operators=[], qualifier=random, selectors=[], type_arguments=None)], member=get, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), name=randomPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=randomPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=clusters, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=k, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), ForStatement(body=BlockStatement(label=None, statements=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[], member=clearDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=nearestCluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Double, selectors=[]), name=minDistance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)], member=distanceTo, postfix_operators=[], prefix_operators=[], qualifier=dataPoint, selectors=[], type_arguments=None), name=distance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=nearestCluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]))]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addDataPoint, postfix_operators=[], prefix_operators=[], qualifier=nearestCluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=&=, value=MethodInvocation(arguments=[], member=updateCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=iteration, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=iteration)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=iteration, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Clusters using for loop (fixed iterations): "")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Cluster ""), operandr=MethodInvocation(arguments=[], member=getId, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="":""), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=getDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Centroid: ""), operandr=MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=KMeansAlgorithm, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=x), VariableDeclarator(dimensions=[], initializer=None, name=y)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=double)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=DataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dx)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dy)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ReturnStatement(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=BinaryOperation(operandl=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operator=+)], member=sqrt, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=distanceTo, parameters=[FormalParameter(annotations=[], modifiers=set(), name=other, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Override)], body=[ReturnStatement(expression=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""(""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="", ""), operator=+), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="")""), operator=+), label=None)], documentation=None, modifiers={'public'}, name=toString, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=DataPoint, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=id)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=int)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=centroid)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=dataPoints)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=id, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=dataPoints, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None))), label=None)], documentation=None, modifiers={'public'}, name=Cluster, parameters=[FormalParameter(annotations=[], modifiers=set(), name=id, type=BasicType(dimensions=[], name=int), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)], documentation=None, modifiers={'public'}, name=updateCentroid, parameters=[], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[], member=clear, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=clearDataPoints, parameters=[], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=addDataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=dataPoint, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getId, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getCentroid, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=centroid, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setCentroid, parameters=[FormalParameter(annotations=[], modifiers=set(), name=centroid, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getDataPoints, parameters=[], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=Cluster, type_parameters=None)])","{'imports': [{'path': 'java.util.ArrayList', 'static': False, 'wildcard': False}, {'path': 'java.util.List', 'static': False, 'wildcard': False}, {'path': 'java.util.Random', 'static': False, 'wildcard': False}], 'types': [{'body': [{'body': [{'type': 'List'}, {'type': 'int'}, {'type': 'int'}, {'type': 'List'}, {'type': 'Random'}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'DataPoint'}, {'expression': {'arguments': [{}]}}, {'expression': {'arguments': [{}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'body': {'statements': [{'body': {'statements': [{}]}, 'control': {'var': {'type': 'Cluster'}}}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'double'}, {'body': {'statements': [{'type': 'double'}, {'condition': {'operator': '<'}, 'then_statement': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '='}}]}}]}, 'control': {'var': {'type': 'Cluster'}}}, {'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'type': 'boolean'}, {'body': {'statements': [{'expression': {'type': '&='}}]}, 'control': {'var': {'type': 'Cluster'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'value': '""Clusters using for loop (fixed iterations): ""'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'value': '""Cluster ""'}, 'operator': '+'}, 'operandr': {'value': '"":""'}, 'operator': '+'}]}}, {'body': {'statements': [{'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'expression': {'arguments': [{'operandl': {'value': '""Centroid: ""'}, 'operator': '+'}]}}]}, 'control': {'var': {'type': 'Cluster'}}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'KMeansAlgorithm'}, {'body': [{'type': 'double'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'DataPoint', 'parameters': [{'name': 'double'}, {'name': 'double'}]}, {'body': [{'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'operator': '*'}, 'operandr': {'operator': '*'}, 'operator': '+'}]}}], 'name': 'distanceTo', 'parameters': [{'name': 'DataPoint'}], 'return_type': {'name': 'double'}}, {'annotations': [{'name': 'Override'}], 'body': [{'expression': {'operandl': {'operandl': {'operandl': {'operandl': {'value': '""(""'}, 'operator': '+'}, 'operandr': {'value': '"", ""'}, 'operator': '+'}, 'operator': '+'}, 'operandr': {'value': '"")""'}, 'operator': '+'}}], 'name': 'toString', 'return_type': {'name': 'String'}}], 'name': 'DataPoint'}, {'body': [{'type': 'int'}, {'type': 'DataPoint'}, {'type': 'List'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'type': 'ArrayList'}}}], 'name': 'Cluster', 'parameters': [{'name': 'int'}]}, {'body': [{'expression': {'value': 'false'}}], 'name': 'updateCentroid', 'return_type': {'name': 'boolean'}}, {'body': [{}], 'name': 'clearDataPoints'}, {'body': [{'expression': {'arguments': [{}]}}], 'name': 'addDataPoint', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getId', 'return_type': {'name': 'int'}}, {'body': [{}], 'name': 'getCentroid', 'return_type': {'name': 'DataPoint'}}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'setCentroid', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getDataPoints', 'return_type': {'arguments': [{'type': 'DataPoint'}], 'name': 'List'}}], 'name': 'Cluster'}]}"
KMeans,For-10,"CompilationUnit(imports=[Import(path=java.util.ArrayList, static=False, wildcard=False), Import(path=java.util.List, static=False, wildcard=False), Import(path=java.util.Random, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=id)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=int)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=centroid)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=dataPoints)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=id, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=dataPoints, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None))), label=None)], documentation=None, modifiers={'public'}, name=Cluster, parameters=[FormalParameter(annotations=[], modifiers=set(), name=id, type=BasicType(dimensions=[], name=int), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)], documentation=None, modifiers={'public'}, name=updateCentroid, parameters=[], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[], member=clear, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=clearDataPoints, parameters=[], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=addDataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=dataPoint, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getId, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getCentroid, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=centroid, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setCentroid, parameters=[FormalParameter(annotations=[], modifiers=set(), name=centroid, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getDataPoints, parameters=[], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=Cluster, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=x), VariableDeclarator(dimensions=[], initializer=None, name=y)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=double)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=DataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dx)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dy)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ReturnStatement(expression=MethodInvocation(arguments=[BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MethodInvocation(arguments=[MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operator=+)], member=sqrt, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=convertDistanceTo, parameters=[FormalParameter(annotations=[], modifiers=set(), name=other, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Override)], body=[ReturnStatement(expression=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""(""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="", ""), operator=+), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="")""), operator=+), label=None)], documentation=None, modifiers={'public'}, name=toString, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=DataPoint, type_parameters=None), ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=dataPoints)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), name=num_clusters)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=clusters)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Random, sub_type=None)), name=random)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Random, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Cluster, sub_type=None)), name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None)], member=nextInt, postfix_operators=[], prefix_operators=[], qualifier=random, selectors=[], type_arguments=None)], member=get, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), name=randomPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=randomPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=clusters, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=num_clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), ForStatement(body=BlockStatement(label=None, statements=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[], member=clearDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=nearestCluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Double, selectors=[]), name=minDistance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)], member=convertDistanceTo, postfix_operators=[], prefix_operators=[], qualifier=dataPoint, selectors=[], type_arguments=None), name=distance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=nearestCluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]))]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addDataPoint, postfix_operators=[], prefix_operators=[], qualifier=nearestCluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MethodInvocation(arguments=[], member=updateCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=&)), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=iteration, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=iteration)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=iteration, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Clusters using for loop (fixed iterations): "")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Cluster ""), operandr=MethodInvocation(arguments=[], member=getId, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="":""), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=getDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Centroid: ""), operandr=MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=KMeansAlgorithm, type_parameters=None)])","{'imports': [{'path': 'java.util.ArrayList', 'static': False, 'wildcard': False}, {'path': 'java.util.List', 'static': False, 'wildcard': False}, {'path': 'java.util.Random', 'static': False, 'wildcard': False}], 'types': [{'body': [{'type': 'int'}, {'type': 'DataPoint'}, {'type': 'List'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'type': 'ArrayList'}}}], 'name': 'Cluster', 'parameters': [{'name': 'int'}]}, {'body': [{'expression': {'value': 'false'}}], 'name': 'updateCentroid', 'return_type': {'name': 'boolean'}}, {'body': [{}], 'name': 'clearDataPoints'}, {'body': [{'expression': {'arguments': [{}]}}], 'name': 'addDataPoint', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getId', 'return_type': {'name': 'int'}}, {'body': [{}], 'name': 'getCentroid', 'return_type': {'name': 'DataPoint'}}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'setCentroid', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getDataPoints', 'return_type': {'arguments': [{'type': 'DataPoint'}], 'name': 'List'}}], 'name': 'Cluster'}, {'body': [{'type': 'double'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'DataPoint', 'parameters': [{'name': 'double'}, {'name': 'double'}]}, {'body': [{'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'arguments': [{}, {'value': '2'}]}, 'operandr': {'arguments': [{}, {'value': '2'}]}, 'operator': '+'}]}}], 'name': 'convertDistanceTo', 'parameters': [{'name': 'DataPoint'}], 'return_type': {'name': 'double'}}, {'annotations': [{'name': 'Override'}], 'body': [{'expression': {'operandl': {'operandl': {'operandl': {'operandl': {'value': '""(""'}, 'operator': '+'}, 'operandr': {'value': '"", ""'}, 'operator': '+'}, 'operator': '+'}, 'operandr': {'value': '"")""'}, 'operator': '+'}}], 'name': 'toString', 'return_type': {'name': 'String'}}], 'name': 'DataPoint'}, {'body': [{'body': [{'type': 'List'}, {'type': 'int'}, {'type': 'int'}, {'type': 'List'}, {'type': 'Random'}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'DataPoint'}, {'expression': {'arguments': [{}]}}, {'expression': {'arguments': [{}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'body': {'statements': [{'body': {'statements': [{}]}, 'control': {'var': {'type': 'Cluster'}}}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'double'}, {'body': {'statements': [{'type': 'double'}, {'condition': {'operator': '>', 'prefix_operators': [{}]}, 'then_statement': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '='}}]}}]}, 'control': {'var': {'type': 'Cluster'}}}, {'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'type': 'boolean'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operator': '&'}}}]}, 'control': {'var': {'type': 'Cluster'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'value': '""Clusters using for loop (fixed iterations): ""'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'value': '""Cluster ""'}, 'operator': '+'}, 'operandr': {'value': '"":""'}, 'operator': '+'}]}}, {'body': {'statements': [{'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'expression': {'arguments': [{'operandl': {'value': '""Centroid: ""'}, 'operator': '+'}]}}]}, 'control': {'var': {'type': 'Cluster'}}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'KMeansAlgorithm'}]}"
KMeans,For-2,"CompilationUnit(imports=[Import(path=java.util.ArrayList, static=False, wildcard=False), Import(path=java.util.List, static=False, wildcard=False), Import(path=java.util.Random, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=dataPoints)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), name=k)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=clusters)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Random, sub_type=None)), name=random)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Random, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Cluster, sub_type=None)), name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None)], member=nextInt, postfix_operators=[], prefix_operators=[], qualifier=random, selectors=[], type_arguments=None)], member=get, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), name=randomPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=randomPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=clusters, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=k, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), ForStatement(body=BlockStatement(label=None, statements=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[], member=clearDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=nearestCluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Double, selectors=[]), name=minDistance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)], member=distanceTo, postfix_operators=[], prefix_operators=[], qualifier=dataPoint, selectors=[], type_arguments=None), name=distance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=nearestCluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]))]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addDataPoint, postfix_operators=[], prefix_operators=[], qualifier=nearestCluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=&=, value=MethodInvocation(arguments=[], member=updateCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=iteration, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=iteration)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=iteration, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Clusters using for loop (fixed iterations): "")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Cluster ""), operandr=MethodInvocation(arguments=[], member=getId, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="":""), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=getDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Centroid: ""), operandr=MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=KMeansAlgorithm, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=x), VariableDeclarator(dimensions=[], initializer=None, name=y)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=double)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=DataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dx)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dy)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ReturnStatement(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=BinaryOperation(operandl=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operator=+)], member=sqrt, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=distanceTo, parameters=[FormalParameter(annotations=[], modifiers=set(), name=other, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Override)], body=[ReturnStatement(expression=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""(""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="", ""), operator=+), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="")""), operator=+), label=None)], documentation=None, modifiers={'public'}, name=toString, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=DataPoint, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=id)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=int)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=centroid)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=dataPoints)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=id, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=dataPoints, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None))), label=None)], documentation=None, modifiers={'public'}, name=Cluster, parameters=[FormalParameter(annotations=[], modifiers=set(), name=id, type=BasicType(dimensions=[], name=int), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)], documentation=None, modifiers={'public'}, name=updateCentroid, parameters=[], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[], member=clear, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=clearDataPoints, parameters=[], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=addDataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=dataPoint, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getId, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getCentroid, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=centroid, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setCentroid, parameters=[FormalParameter(annotations=[], modifiers=set(), name=centroid, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getDataPoints, parameters=[], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=Cluster, type_parameters=None)])","{'imports': [{'path': 'java.util.ArrayList', 'static': False, 'wildcard': False}, {'path': 'java.util.List', 'static': False, 'wildcard': False}, {'path': 'java.util.Random', 'static': False, 'wildcard': False}], 'types': [{'body': [{'body': [{'type': 'List'}, {'type': 'int'}, {'type': 'int'}, {'type': 'List'}, {'type': 'Random'}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'DataPoint'}, {'expression': {'arguments': [{}]}}, {'expression': {'arguments': [{}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'body': {'statements': [{'body': {'statements': [{}]}, 'control': {'var': {'type': 'Cluster'}}}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'double'}, {'body': {'statements': [{'type': 'double'}, {'condition': {'operator': '<'}, 'then_statement': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '='}}]}}]}, 'control': {'var': {'type': 'Cluster'}}}, {'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'type': 'boolean'}, {'body': {'statements': [{'expression': {'type': '&='}}]}, 'control': {'var': {'type': 'Cluster'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'value': '""Clusters using for loop (fixed iterations): ""'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'value': '""Cluster ""'}, 'operator': '+'}, 'operandr': {'value': '"":""'}, 'operator': '+'}]}}, {'body': {'statements': [{'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'expression': {'arguments': [{'operandl': {'value': '""Centroid: ""'}, 'operator': '+'}]}}]}, 'control': {'var': {'type': 'Cluster'}}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'KMeansAlgorithm'}, {'body': [{'type': 'double'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'DataPoint', 'parameters': [{'name': 'double'}, {'name': 'double'}]}, {'body': [{'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'operator': '*'}, 'operandr': {'operator': '*'}, 'operator': '+'}]}}], 'name': 'distanceTo', 'parameters': [{'name': 'DataPoint'}], 'return_type': {'name': 'double'}}, {'annotations': [{'name': 'Override'}], 'body': [{'expression': {'operandl': {'operandl': {'operandl': {'operandl': {'value': '""(""'}, 'operator': '+'}, 'operandr': {'value': '"", ""'}, 'operator': '+'}, 'operator': '+'}, 'operandr': {'value': '"")""'}, 'operator': '+'}}], 'name': 'toString', 'return_type': {'name': 'String'}}], 'name': 'DataPoint'}, {'body': [{'type': 'int'}, {'type': 'DataPoint'}, {'type': 'List'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'type': 'ArrayList'}}}], 'name': 'Cluster', 'parameters': [{'name': 'int'}]}, {'body': [{'expression': {'value': 'false'}}], 'name': 'updateCentroid', 'return_type': {'name': 'boolean'}}, {'body': [{}], 'name': 'clearDataPoints'}, {'body': [{'expression': {'arguments': [{}]}}], 'name': 'addDataPoint', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getId', 'return_type': {'name': 'int'}}, {'body': [{}], 'name': 'getCentroid', 'return_type': {'name': 'DataPoint'}}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'setCentroid', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getDataPoints', 'return_type': {'arguments': [{'type': 'DataPoint'}], 'name': 'List'}}], 'name': 'Cluster'}]}"
KMeans,For-3,"CompilationUnit(imports=[Import(path=java.util.ArrayList, static=False, wildcard=False), Import(path=java.util.List, static=False, wildcard=False), Import(path=java.util.Random, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=dataPoints)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), name=num_clusters)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=clusters)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Random, sub_type=None)), name=random)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Random, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Cluster, sub_type=None)), name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None)], member=nextInt, postfix_operators=[], prefix_operators=[], qualifier=random, selectors=[], type_arguments=None)], member=get, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), name=randomPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=randomPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=clusters, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=num_clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), ForStatement(body=BlockStatement(label=None, statements=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[], member=clearDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=nearestCluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Double, selectors=[]), name=minDistance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)], member=distanceTo, postfix_operators=[], prefix_operators=[], qualifier=dataPoint, selectors=[], type_arguments=None), name=distance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=nearestCluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]))]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addDataPoint, postfix_operators=[], prefix_operators=[], qualifier=nearestCluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=&=, value=MethodInvocation(arguments=[], member=updateCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=iteration, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=iteration)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=iteration, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Clusters using for loop (fixed iterations): "")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Cluster ""), operandr=MethodInvocation(arguments=[], member=getId, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="":""), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=getDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Centroid: ""), operandr=MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=KMeansAlgorithm, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=x), VariableDeclarator(dimensions=[], initializer=None, name=y)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=double)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=DataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dx)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dy)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ReturnStatement(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=BinaryOperation(operandl=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operator=+)], member=sqrt, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=distanceTo, parameters=[FormalParameter(annotations=[], modifiers=set(), name=other, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Override)], body=[ReturnStatement(expression=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""(""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="", ""), operator=+), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="")""), operator=+), label=None)], documentation=None, modifiers={'public'}, name=toString, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=DataPoint, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=id)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=int)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=centroid)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=dataPoints)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=id, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=dataPoints, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None))), label=None)], documentation=None, modifiers={'public'}, name=Cluster, parameters=[FormalParameter(annotations=[], modifiers=set(), name=id, type=BasicType(dimensions=[], name=int), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)], documentation=None, modifiers={'public'}, name=updateCentroid, parameters=[], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[], member=clear, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=clearDataPoints, parameters=[], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=addDataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=dataPoint, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getId, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getCentroid, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=centroid, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setCentroid, parameters=[FormalParameter(annotations=[], modifiers=set(), name=centroid, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getDataPoints, parameters=[], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=Cluster, type_parameters=None)])","{'imports': [{'path': 'java.util.ArrayList', 'static': False, 'wildcard': False}, {'path': 'java.util.List', 'static': False, 'wildcard': False}, {'path': 'java.util.Random', 'static': False, 'wildcard': False}], 'types': [{'body': [{'body': [{'type': 'List'}, {'type': 'int'}, {'type': 'int'}, {'type': 'List'}, {'type': 'Random'}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'DataPoint'}, {'expression': {'arguments': [{}]}}, {'expression': {'arguments': [{}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'body': {'statements': [{'body': {'statements': [{}]}, 'control': {'var': {'type': 'Cluster'}}}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'double'}, {'body': {'statements': [{'type': 'double'}, {'condition': {'operator': '<'}, 'then_statement': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '='}}]}}]}, 'control': {'var': {'type': 'Cluster'}}}, {'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'type': 'boolean'}, {'body': {'statements': [{'expression': {'type': '&='}}]}, 'control': {'var': {'type': 'Cluster'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'value': '""Clusters using for loop (fixed iterations): ""'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'value': '""Cluster ""'}, 'operator': '+'}, 'operandr': {'value': '"":""'}, 'operator': '+'}]}}, {'body': {'statements': [{'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'expression': {'arguments': [{'operandl': {'value': '""Centroid: ""'}, 'operator': '+'}]}}]}, 'control': {'var': {'type': 'Cluster'}}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'KMeansAlgorithm'}, {'body': [{'type': 'double'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'DataPoint', 'parameters': [{'name': 'double'}, {'name': 'double'}]}, {'body': [{'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'operator': '*'}, 'operandr': {'operator': '*'}, 'operator': '+'}]}}], 'name': 'distanceTo', 'parameters': [{'name': 'DataPoint'}], 'return_type': {'name': 'double'}}, {'annotations': [{'name': 'Override'}], 'body': [{'expression': {'operandl': {'operandl': {'operandl': {'operandl': {'value': '""(""'}, 'operator': '+'}, 'operandr': {'value': '"", ""'}, 'operator': '+'}, 'operator': '+'}, 'operandr': {'value': '"")""'}, 'operator': '+'}}], 'name': 'toString', 'return_type': {'name': 'String'}}], 'name': 'DataPoint'}, {'body': [{'type': 'int'}, {'type': 'DataPoint'}, {'type': 'List'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'type': 'ArrayList'}}}], 'name': 'Cluster', 'parameters': [{'name': 'int'}]}, {'body': [{'expression': {'value': 'false'}}], 'name': 'updateCentroid', 'return_type': {'name': 'boolean'}}, {'body': [{}], 'name': 'clearDataPoints'}, {'body': [{'expression': {'arguments': [{}]}}], 'name': 'addDataPoint', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getId', 'return_type': {'name': 'int'}}, {'body': [{}], 'name': 'getCentroid', 'return_type': {'name': 'DataPoint'}}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'setCentroid', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getDataPoints', 'return_type': {'arguments': [{'type': 'DataPoint'}], 'name': 'List'}}], 'name': 'Cluster'}]}"
KMeans,For-4,"CompilationUnit(imports=[Import(path=java.util.ArrayList, static=False, wildcard=False), Import(path=java.util.List, static=False, wildcard=False), Import(path=java.util.Random, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=dataPoints)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), name=num_clusters)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=clusters)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Random, sub_type=None)), name=random)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Random, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Cluster, sub_type=None)), name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None)], member=nextInt, postfix_operators=[], prefix_operators=[], qualifier=random, selectors=[], type_arguments=None)], member=get, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), name=randomPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=randomPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=clusters, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=num_clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), ForStatement(body=BlockStatement(label=None, statements=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[], member=clearDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=nearestCluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Double, selectors=[]), name=minDistance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)], member=convertDistanceTo, postfix_operators=[], prefix_operators=[], qualifier=dataPoint, selectors=[], type_arguments=None), name=distance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=nearestCluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]))]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addDataPoint, postfix_operators=[], prefix_operators=[], qualifier=nearestCluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=&=, value=MethodInvocation(arguments=[], member=updateCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=iteration, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=iteration)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=iteration, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Clusters using for loop (fixed iterations): "")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Cluster ""), operandr=MethodInvocation(arguments=[], member=getId, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="":""), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=getDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Centroid: ""), operandr=MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=KMeansAlgorithm, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=x), VariableDeclarator(dimensions=[], initializer=None, name=y)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=double)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=DataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dx)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dy)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ReturnStatement(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=BinaryOperation(operandl=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operator=+)], member=sqrt, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=convertDistanceTo, parameters=[FormalParameter(annotations=[], modifiers=set(), name=other, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Override)], body=[ReturnStatement(expression=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""(""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="", ""), operator=+), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="")""), operator=+), label=None)], documentation=None, modifiers={'public'}, name=toString, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=DataPoint, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=id)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=int)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=centroid)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=dataPoints)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=id, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=dataPoints, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None))), label=None)], documentation=None, modifiers={'public'}, name=Cluster, parameters=[FormalParameter(annotations=[], modifiers=set(), name=id, type=BasicType(dimensions=[], name=int), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)], documentation=None, modifiers={'public'}, name=updateCentroid, parameters=[], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[], member=clear, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=clearDataPoints, parameters=[], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=addDataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=dataPoint, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getId, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getCentroid, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=centroid, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setCentroid, parameters=[FormalParameter(annotations=[], modifiers=set(), name=centroid, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getDataPoints, parameters=[], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=Cluster, type_parameters=None)])","{'imports': [{'path': 'java.util.ArrayList', 'static': False, 'wildcard': False}, {'path': 'java.util.List', 'static': False, 'wildcard': False}, {'path': 'java.util.Random', 'static': False, 'wildcard': False}], 'types': [{'body': [{'body': [{'type': 'List'}, {'type': 'int'}, {'type': 'int'}, {'type': 'List'}, {'type': 'Random'}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'DataPoint'}, {'expression': {'arguments': [{}]}}, {'expression': {'arguments': [{}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'body': {'statements': [{'body': {'statements': [{}]}, 'control': {'var': {'type': 'Cluster'}}}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'double'}, {'body': {'statements': [{'type': 'double'}, {'condition': {'operator': '<'}, 'then_statement': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '='}}]}}]}, 'control': {'var': {'type': 'Cluster'}}}, {'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'type': 'boolean'}, {'body': {'statements': [{'expression': {'type': '&='}}]}, 'control': {'var': {'type': 'Cluster'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'value': '""Clusters using for loop (fixed iterations): ""'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'value': '""Cluster ""'}, 'operator': '+'}, 'operandr': {'value': '"":""'}, 'operator': '+'}]}}, {'body': {'statements': [{'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'expression': {'arguments': [{'operandl': {'value': '""Centroid: ""'}, 'operator': '+'}]}}]}, 'control': {'var': {'type': 'Cluster'}}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'KMeansAlgorithm'}, {'body': [{'type': 'double'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'DataPoint', 'parameters': [{'name': 'double'}, {'name': 'double'}]}, {'body': [{'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'operator': '*'}, 'operandr': {'operator': '*'}, 'operator': '+'}]}}], 'name': 'convertDistanceTo', 'parameters': [{'name': 'DataPoint'}], 'return_type': {'name': 'double'}}, {'annotations': [{'name': 'Override'}], 'body': [{'expression': {'operandl': {'operandl': {'operandl': {'operandl': {'value': '""(""'}, 'operator': '+'}, 'operandr': {'value': '"", ""'}, 'operator': '+'}, 'operator': '+'}, 'operandr': {'value': '"")""'}, 'operator': '+'}}], 'name': 'toString', 'return_type': {'name': 'String'}}], 'name': 'DataPoint'}, {'body': [{'type': 'int'}, {'type': 'DataPoint'}, {'type': 'List'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'type': 'ArrayList'}}}], 'name': 'Cluster', 'parameters': [{'name': 'int'}]}, {'body': [{'expression': {'value': 'false'}}], 'name': 'updateCentroid', 'return_type': {'name': 'boolean'}}, {'body': [{}], 'name': 'clearDataPoints'}, {'body': [{'expression': {'arguments': [{}]}}], 'name': 'addDataPoint', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getId', 'return_type': {'name': 'int'}}, {'body': [{}], 'name': 'getCentroid', 'return_type': {'name': 'DataPoint'}}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'setCentroid', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getDataPoints', 'return_type': {'arguments': [{'type': 'DataPoint'}], 'name': 'List'}}], 'name': 'Cluster'}]}"
KMeans,For-5,"CompilationUnit(imports=[Import(path=java.util.ArrayList, static=False, wildcard=False), Import(path=java.util.List, static=False, wildcard=False), Import(path=java.util.Random, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=dataPoints)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), name=num_clusters)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=clusters)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Random, sub_type=None)), name=random)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Random, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Cluster, sub_type=None)), name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None)], member=nextInt, postfix_operators=[], prefix_operators=[], qualifier=random, selectors=[], type_arguments=None)], member=get, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), name=randomPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=randomPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=clusters, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=num_clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), ForStatement(body=BlockStatement(label=None, statements=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[], member=clearDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=nearestCluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Double, selectors=[]), name=minDistance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)], member=convertDistanceTo, postfix_operators=[], prefix_operators=[], qualifier=dataPoint, selectors=[], type_arguments=None), name=distance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=nearestCluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]))]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addDataPoint, postfix_operators=[], prefix_operators=[], qualifier=nearestCluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=&=, value=MethodInvocation(arguments=[], member=updateCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=iteration, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=iteration)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=iteration, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Clusters using for loop (fixed iterations): "")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Cluster ""), operandr=MethodInvocation(arguments=[], member=getId, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="":""), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=getDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Centroid: ""), operandr=MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=KMeansAlgorithm, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=x), VariableDeclarator(dimensions=[], initializer=None, name=y)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=double)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=DataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dx)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dy)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ReturnStatement(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=BinaryOperation(operandl=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operator=+)], member=sqrt, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=convertDistanceTo, parameters=[FormalParameter(annotations=[], modifiers=set(), name=other, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Override)], body=[ReturnStatement(expression=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""(""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="", ""), operator=+), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="")""), operator=+), label=None)], documentation=None, modifiers={'public'}, name=toString, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=DataPoint, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=id)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=int)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=centroid)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=dataPoints)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=id, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=dataPoints, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None))), label=None)], documentation=None, modifiers={'public'}, name=Cluster, parameters=[FormalParameter(annotations=[], modifiers=set(), name=id, type=BasicType(dimensions=[], name=int), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)], documentation=None, modifiers={'public'}, name=updateCentroid, parameters=[], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[], member=clear, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=clearDataPoints, parameters=[], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=addDataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=dataPoint, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getId, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getCentroid, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=centroid, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setCentroid, parameters=[FormalParameter(annotations=[], modifiers=set(), name=centroid, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getDataPoints, parameters=[], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=Cluster, type_parameters=None)])","{'imports': [{'path': 'java.util.ArrayList', 'static': False, 'wildcard': False}, {'path': 'java.util.List', 'static': False, 'wildcard': False}, {'path': 'java.util.Random', 'static': False, 'wildcard': False}], 'types': [{'body': [{'body': [{'type': 'List'}, {'type': 'int'}, {'type': 'int'}, {'type': 'List'}, {'type': 'Random'}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'DataPoint'}, {'expression': {'arguments': [{}]}}, {'expression': {'arguments': [{}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'body': {'statements': [{'body': {'statements': [{}]}, 'control': {'var': {'type': 'Cluster'}}}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'double'}, {'body': {'statements': [{'type': 'double'}, {'condition': {'operator': '>', 'prefix_operators': [{}]}, 'then_statement': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '='}}]}}]}, 'control': {'var': {'type': 'Cluster'}}}, {'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'type': 'boolean'}, {'body': {'statements': [{'expression': {'type': '&='}}]}, 'control': {'var': {'type': 'Cluster'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'value': '""Clusters using for loop (fixed iterations): ""'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'value': '""Cluster ""'}, 'operator': '+'}, 'operandr': {'value': '"":""'}, 'operator': '+'}]}}, {'body': {'statements': [{'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'expression': {'arguments': [{'operandl': {'value': '""Centroid: ""'}, 'operator': '+'}]}}]}, 'control': {'var': {'type': 'Cluster'}}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'KMeansAlgorithm'}, {'body': [{'type': 'double'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'DataPoint', 'parameters': [{'name': 'double'}, {'name': 'double'}]}, {'body': [{'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'operator': '*'}, 'operandr': {'operator': '*'}, 'operator': '+'}]}}], 'name': 'convertDistanceTo', 'parameters': [{'name': 'DataPoint'}], 'return_type': {'name': 'double'}}, {'annotations': [{'name': 'Override'}], 'body': [{'expression': {'operandl': {'operandl': {'operandl': {'operandl': {'value': '""(""'}, 'operator': '+'}, 'operandr': {'value': '"", ""'}, 'operator': '+'}, 'operator': '+'}, 'operandr': {'value': '"")""'}, 'operator': '+'}}], 'name': 'toString', 'return_type': {'name': 'String'}}], 'name': 'DataPoint'}, {'body': [{'type': 'int'}, {'type': 'DataPoint'}, {'type': 'List'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'type': 'ArrayList'}}}], 'name': 'Cluster', 'parameters': [{'name': 'int'}]}, {'body': [{'expression': {'value': 'false'}}], 'name': 'updateCentroid', 'return_type': {'name': 'boolean'}}, {'body': [{}], 'name': 'clearDataPoints'}, {'body': [{'expression': {'arguments': [{}]}}], 'name': 'addDataPoint', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getId', 'return_type': {'name': 'int'}}, {'body': [{}], 'name': 'getCentroid', 'return_type': {'name': 'DataPoint'}}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'setCentroid', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getDataPoints', 'return_type': {'arguments': [{'type': 'DataPoint'}], 'name': 'List'}}], 'name': 'Cluster'}]}"
KMeans,For-6,"CompilationUnit(imports=[Import(path=java.util.ArrayList, static=False, wildcard=False), Import(path=java.util.List, static=False, wildcard=False), Import(path=java.util.Random, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=dataPoints)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), name=num_clusters)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=clusters)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Random, sub_type=None)), name=random)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Random, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Cluster, sub_type=None)), name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None)], member=nextInt, postfix_operators=[], prefix_operators=[], qualifier=random, selectors=[], type_arguments=None)], member=get, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), name=randomPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=randomPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=clusters, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=num_clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), ForStatement(body=BlockStatement(label=None, statements=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[], member=clearDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=nearestCluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Double, selectors=[]), name=minDistance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)], member=convertDistanceTo, postfix_operators=[], prefix_operators=[], qualifier=dataPoint, selectors=[], type_arguments=None), name=distance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=nearestCluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]))]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addDataPoint, postfix_operators=[], prefix_operators=[], qualifier=nearestCluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MethodInvocation(arguments=[], member=updateCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=&)), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=iteration, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=iteration)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=iteration, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Clusters using for loop (fixed iterations): "")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Cluster ""), operandr=MethodInvocation(arguments=[], member=getId, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="":""), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=getDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Centroid: ""), operandr=MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=KMeansAlgorithm, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=x), VariableDeclarator(dimensions=[], initializer=None, name=y)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=double)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=DataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dx)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dy)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ReturnStatement(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=BinaryOperation(operandl=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operator=+)], member=sqrt, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=convertDistanceTo, parameters=[FormalParameter(annotations=[], modifiers=set(), name=other, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Override)], body=[ReturnStatement(expression=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""(""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="", ""), operator=+), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="")""), operator=+), label=None)], documentation=None, modifiers={'public'}, name=toString, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=DataPoint, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=id)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=int)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=centroid)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=dataPoints)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=id, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=dataPoints, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None))), label=None)], documentation=None, modifiers={'public'}, name=Cluster, parameters=[FormalParameter(annotations=[], modifiers=set(), name=id, type=BasicType(dimensions=[], name=int), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)], documentation=None, modifiers={'public'}, name=updateCentroid, parameters=[], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[], member=clear, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=clearDataPoints, parameters=[], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=addDataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=dataPoint, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getId, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getCentroid, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=centroid, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setCentroid, parameters=[FormalParameter(annotations=[], modifiers=set(), name=centroid, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getDataPoints, parameters=[], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=Cluster, type_parameters=None)])","{'imports': [{'path': 'java.util.ArrayList', 'static': False, 'wildcard': False}, {'path': 'java.util.List', 'static': False, 'wildcard': False}, {'path': 'java.util.Random', 'static': False, 'wildcard': False}], 'types': [{'body': [{'body': [{'type': 'List'}, {'type': 'int'}, {'type': 'int'}, {'type': 'List'}, {'type': 'Random'}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'DataPoint'}, {'expression': {'arguments': [{}]}}, {'expression': {'arguments': [{}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'body': {'statements': [{'body': {'statements': [{}]}, 'control': {'var': {'type': 'Cluster'}}}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'double'}, {'body': {'statements': [{'type': 'double'}, {'condition': {'operator': '<'}, 'then_statement': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '='}}]}}]}, 'control': {'var': {'type': 'Cluster'}}}, {'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'type': 'boolean'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operator': '&'}}}]}, 'control': {'var': {'type': 'Cluster'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'value': '""Clusters using for loop (fixed iterations): ""'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'value': '""Cluster ""'}, 'operator': '+'}, 'operandr': {'value': '"":""'}, 'operator': '+'}]}}, {'body': {'statements': [{'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'expression': {'arguments': [{'operandl': {'value': '""Centroid: ""'}, 'operator': '+'}]}}]}, 'control': {'var': {'type': 'Cluster'}}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'KMeansAlgorithm'}, {'body': [{'type': 'double'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'DataPoint', 'parameters': [{'name': 'double'}, {'name': 'double'}]}, {'body': [{'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'operator': '*'}, 'operandr': {'operator': '*'}, 'operator': '+'}]}}], 'name': 'convertDistanceTo', 'parameters': [{'name': 'DataPoint'}], 'return_type': {'name': 'double'}}, {'annotations': [{'name': 'Override'}], 'body': [{'expression': {'operandl': {'operandl': {'operandl': {'operandl': {'value': '""(""'}, 'operator': '+'}, 'operandr': {'value': '"", ""'}, 'operator': '+'}, 'operator': '+'}, 'operandr': {'value': '"")""'}, 'operator': '+'}}], 'name': 'toString', 'return_type': {'name': 'String'}}], 'name': 'DataPoint'}, {'body': [{'type': 'int'}, {'type': 'DataPoint'}, {'type': 'List'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'type': 'ArrayList'}}}], 'name': 'Cluster', 'parameters': [{'name': 'int'}]}, {'body': [{'expression': {'value': 'false'}}], 'name': 'updateCentroid', 'return_type': {'name': 'boolean'}}, {'body': [{}], 'name': 'clearDataPoints'}, {'body': [{'expression': {'arguments': [{}]}}], 'name': 'addDataPoint', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getId', 'return_type': {'name': 'int'}}, {'body': [{}], 'name': 'getCentroid', 'return_type': {'name': 'DataPoint'}}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'setCentroid', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getDataPoints', 'return_type': {'arguments': [{'type': 'DataPoint'}], 'name': 'List'}}], 'name': 'Cluster'}]}"
KMeans,For-7,"CompilationUnit(imports=[Import(path=java.util.ArrayList, static=False, wildcard=False), Import(path=java.util.List, static=False, wildcard=False), Import(path=java.util.Random, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=dataPoints)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), name=num_clusters)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=clusters)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Random, sub_type=None)), name=random)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Random, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Cluster, sub_type=None)), name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None)], member=nextInt, postfix_operators=[], prefix_operators=[], qualifier=random, selectors=[], type_arguments=None)], member=get, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), name=randomPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=randomPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=clusters, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=num_clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), ForStatement(body=BlockStatement(label=None, statements=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[], member=clearDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=nearestCluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Double, selectors=[]), name=minDistance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)], member=convertDistanceTo, postfix_operators=[], prefix_operators=[], qualifier=dataPoint, selectors=[], type_arguments=None), name=distance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=nearestCluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]))]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addDataPoint, postfix_operators=[], prefix_operators=[], qualifier=nearestCluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MethodInvocation(arguments=[], member=updateCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=&)), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=iteration, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=iteration)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=iteration, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Clusters using for loop (fixed iterations): "")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Cluster ""), operandr=MethodInvocation(arguments=[], member=getId, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="":""), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=getDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Centroid: ""), operandr=MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=KMeansAlgorithm, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=x), VariableDeclarator(dimensions=[], initializer=None, name=y)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=double)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=DataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dx)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dy)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ReturnStatement(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=BinaryOperation(operandl=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operator=+)], member=sqrt, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=convertDistanceTo, parameters=[FormalParameter(annotations=[], modifiers=set(), name=other, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Override)], body=[ReturnStatement(expression=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""(""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="", ""), operator=+), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="")""), operator=+), label=None)], documentation=None, modifiers={'public'}, name=toString, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=DataPoint, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=id)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=int)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=centroid)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=dataPoints)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=id, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=dataPoints, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None))), label=None)], documentation=None, modifiers={'public'}, name=Cluster, parameters=[FormalParameter(annotations=[], modifiers=set(), name=id, type=BasicType(dimensions=[], name=int), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)], documentation=None, modifiers={'public'}, name=updateCentroid, parameters=[], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[], member=clear, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=clearDataPoints, parameters=[], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=addDataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=dataPoint, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getId, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getCentroid, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=centroid, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setCentroid, parameters=[FormalParameter(annotations=[], modifiers=set(), name=centroid, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getDataPoints, parameters=[], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=Cluster, type_parameters=None)])","{'imports': [{'path': 'java.util.ArrayList', 'static': False, 'wildcard': False}, {'path': 'java.util.List', 'static': False, 'wildcard': False}, {'path': 'java.util.Random', 'static': False, 'wildcard': False}], 'types': [{'body': [{'body': [{'type': 'List'}, {'type': 'int'}, {'type': 'int'}, {'type': 'List'}, {'type': 'Random'}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'DataPoint'}, {'expression': {'arguments': [{}]}}, {'expression': {'arguments': [{}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'body': {'statements': [{'body': {'statements': [{}]}, 'control': {'var': {'type': 'Cluster'}}}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'double'}, {'body': {'statements': [{'type': 'double'}, {'condition': {'operator': '>', 'prefix_operators': [{}]}, 'then_statement': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '='}}]}}]}, 'control': {'var': {'type': 'Cluster'}}}, {'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'type': 'boolean'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operator': '&'}}}]}, 'control': {'var': {'type': 'Cluster'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'value': '""Clusters using for loop (fixed iterations): ""'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'value': '""Cluster ""'}, 'operator': '+'}, 'operandr': {'value': '"":""'}, 'operator': '+'}]}}, {'body': {'statements': [{'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'expression': {'arguments': [{'operandl': {'value': '""Centroid: ""'}, 'operator': '+'}]}}]}, 'control': {'var': {'type': 'Cluster'}}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'KMeansAlgorithm'}, {'body': [{'type': 'double'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'DataPoint', 'parameters': [{'name': 'double'}, {'name': 'double'}]}, {'body': [{'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'operator': '*'}, 'operandr': {'operator': '*'}, 'operator': '+'}]}}], 'name': 'convertDistanceTo', 'parameters': [{'name': 'DataPoint'}], 'return_type': {'name': 'double'}}, {'annotations': [{'name': 'Override'}], 'body': [{'expression': {'operandl': {'operandl': {'operandl': {'operandl': {'value': '""(""'}, 'operator': '+'}, 'operandr': {'value': '"", ""'}, 'operator': '+'}, 'operator': '+'}, 'operandr': {'value': '"")""'}, 'operator': '+'}}], 'name': 'toString', 'return_type': {'name': 'String'}}], 'name': 'DataPoint'}, {'body': [{'type': 'int'}, {'type': 'DataPoint'}, {'type': 'List'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'type': 'ArrayList'}}}], 'name': 'Cluster', 'parameters': [{'name': 'int'}]}, {'body': [{'expression': {'value': 'false'}}], 'name': 'updateCentroid', 'return_type': {'name': 'boolean'}}, {'body': [{}], 'name': 'clearDataPoints'}, {'body': [{'expression': {'arguments': [{}]}}], 'name': 'addDataPoint', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getId', 'return_type': {'name': 'int'}}, {'body': [{}], 'name': 'getCentroid', 'return_type': {'name': 'DataPoint'}}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'setCentroid', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getDataPoints', 'return_type': {'arguments': [{'type': 'DataPoint'}], 'name': 'List'}}], 'name': 'Cluster'}]}"
KMeans,For-8,"CompilationUnit(imports=[Import(path=java.util.ArrayList, static=False, wildcard=False), Import(path=java.util.List, static=False, wildcard=False), Import(path=java.util.Random, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=x), VariableDeclarator(dimensions=[], initializer=None, name=y)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=double)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=DataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dx)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dy)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ReturnStatement(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=BinaryOperation(operandl=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operator=+)], member=sqrt, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=convertDistanceTo, parameters=[FormalParameter(annotations=[], modifiers=set(), name=other, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Override)], body=[ReturnStatement(expression=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""(""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="", ""), operator=+), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="")""), operator=+), label=None)], documentation=None, modifiers={'public'}, name=toString, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=DataPoint, type_parameters=None), ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=dataPoints)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), name=num_clusters)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=clusters)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Random, sub_type=None)), name=random)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Random, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Cluster, sub_type=None)), name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None)], member=nextInt, postfix_operators=[], prefix_operators=[], qualifier=random, selectors=[], type_arguments=None)], member=get, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), name=randomPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=randomPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=clusters, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=num_clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), ForStatement(body=BlockStatement(label=None, statements=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[], member=clearDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=nearestCluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Double, selectors=[]), name=minDistance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)], member=convertDistanceTo, postfix_operators=[], prefix_operators=[], qualifier=dataPoint, selectors=[], type_arguments=None), name=distance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=nearestCluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]))]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addDataPoint, postfix_operators=[], prefix_operators=[], qualifier=nearestCluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MethodInvocation(arguments=[], member=updateCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=&)), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=iteration, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=iteration)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=iteration, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Clusters using for loop (fixed iterations): "")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Cluster ""), operandr=MethodInvocation(arguments=[], member=getId, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="":""), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=getDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Centroid: ""), operandr=MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=KMeansAlgorithm, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=id)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=int)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=centroid)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=dataPoints)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=id, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=dataPoints, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None))), label=None)], documentation=None, modifiers={'public'}, name=Cluster, parameters=[FormalParameter(annotations=[], modifiers=set(), name=id, type=BasicType(dimensions=[], name=int), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)], documentation=None, modifiers={'public'}, name=updateCentroid, parameters=[], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[], member=clear, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=clearDataPoints, parameters=[], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=addDataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=dataPoint, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getId, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getCentroid, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=centroid, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setCentroid, parameters=[FormalParameter(annotations=[], modifiers=set(), name=centroid, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getDataPoints, parameters=[], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=Cluster, type_parameters=None)])","{'imports': [{'path': 'java.util.ArrayList', 'static': False, 'wildcard': False}, {'path': 'java.util.List', 'static': False, 'wildcard': False}, {'path': 'java.util.Random', 'static': False, 'wildcard': False}], 'types': [{'body': [{'type': 'double'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'DataPoint', 'parameters': [{'name': 'double'}, {'name': 'double'}]}, {'body': [{'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'operator': '*'}, 'operandr': {'operator': '*'}, 'operator': '+'}]}}], 'name': 'convertDistanceTo', 'parameters': [{'name': 'DataPoint'}], 'return_type': {'name': 'double'}}, {'annotations': [{'name': 'Override'}], 'body': [{'expression': {'operandl': {'operandl': {'operandl': {'operandl': {'value': '""(""'}, 'operator': '+'}, 'operandr': {'value': '"", ""'}, 'operator': '+'}, 'operator': '+'}, 'operandr': {'value': '"")""'}, 'operator': '+'}}], 'name': 'toString', 'return_type': {'name': 'String'}}], 'name': 'DataPoint'}, {'body': [{'body': [{'type': 'List'}, {'type': 'int'}, {'type': 'int'}, {'type': 'List'}, {'type': 'Random'}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'DataPoint'}, {'expression': {'arguments': [{}]}}, {'expression': {'arguments': [{}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'body': {'statements': [{'body': {'statements': [{}]}, 'control': {'var': {'type': 'Cluster'}}}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'double'}, {'body': {'statements': [{'type': 'double'}, {'condition': {'operator': '>', 'prefix_operators': [{}]}, 'then_statement': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '='}}]}}]}, 'control': {'var': {'type': 'Cluster'}}}, {'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'type': 'boolean'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operator': '&'}}}]}, 'control': {'var': {'type': 'Cluster'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'value': '""Clusters using for loop (fixed iterations): ""'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'value': '""Cluster ""'}, 'operator': '+'}, 'operandr': {'value': '"":""'}, 'operator': '+'}]}}, {'body': {'statements': [{'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'expression': {'arguments': [{'operandl': {'value': '""Centroid: ""'}, 'operator': '+'}]}}]}, 'control': {'var': {'type': 'Cluster'}}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'KMeansAlgorithm'}, {'body': [{'type': 'int'}, {'type': 'DataPoint'}, {'type': 'List'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'type': 'ArrayList'}}}], 'name': 'Cluster', 'parameters': [{'name': 'int'}]}, {'body': [{'expression': {'value': 'false'}}], 'name': 'updateCentroid', 'return_type': {'name': 'boolean'}}, {'body': [{}], 'name': 'clearDataPoints'}, {'body': [{'expression': {'arguments': [{}]}}], 'name': 'addDataPoint', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getId', 'return_type': {'name': 'int'}}, {'body': [{}], 'name': 'getCentroid', 'return_type': {'name': 'DataPoint'}}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'setCentroid', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getDataPoints', 'return_type': {'arguments': [{'type': 'DataPoint'}], 'name': 'List'}}], 'name': 'Cluster'}]}"
KMeans,For-9,"CompilationUnit(imports=[Import(path=java.util.ArrayList, static=False, wildcard=False), Import(path=java.util.List, static=False, wildcard=False), Import(path=java.util.Random, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=id)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=int)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=centroid)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=dataPoints)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=id, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=dataPoints, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None))), label=None)], documentation=None, modifiers={'public'}, name=Cluster, parameters=[FormalParameter(annotations=[], modifiers=set(), name=id, type=BasicType(dimensions=[], name=int), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)], documentation=None, modifiers={'public'}, name=updateCentroid, parameters=[], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[], member=clear, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=clearDataPoints, parameters=[], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=addDataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=dataPoint, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getId, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getCentroid, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=centroid, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setCentroid, parameters=[FormalParameter(annotations=[], modifiers=set(), name=centroid, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getDataPoints, parameters=[], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=Cluster, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=x), VariableDeclarator(dimensions=[], initializer=None, name=y)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=double)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=DataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dx)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dy)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ReturnStatement(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=BinaryOperation(operandl=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operator=+)], member=sqrt, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=convertDistanceTo, parameters=[FormalParameter(annotations=[], modifiers=set(), name=other, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Override)], body=[ReturnStatement(expression=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""(""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="", ""), operator=+), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="")""), operator=+), label=None)], documentation=None, modifiers={'public'}, name=toString, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=DataPoint, type_parameters=None), ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=dataPoints)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), name=num_clusters)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=clusters)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Random, sub_type=None)), name=random)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Random, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Cluster, sub_type=None)), name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None)], member=nextInt, postfix_operators=[], prefix_operators=[], qualifier=random, selectors=[], type_arguments=None)], member=get, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), name=randomPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=randomPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=clusters, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=num_clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), ForStatement(body=BlockStatement(label=None, statements=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[], member=clearDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=nearestCluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Double, selectors=[]), name=minDistance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)], member=convertDistanceTo, postfix_operators=[], prefix_operators=[], qualifier=dataPoint, selectors=[], type_arguments=None), name=distance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=nearestCluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]))]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addDataPoint, postfix_operators=[], prefix_operators=[], qualifier=nearestCluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MethodInvocation(arguments=[], member=updateCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=&)), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=iteration, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=iteration)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=iteration, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Clusters using for loop (fixed iterations): "")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Cluster ""), operandr=MethodInvocation(arguments=[], member=getId, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="":""), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=getDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Centroid: ""), operandr=MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=KMeansAlgorithm, type_parameters=None)])","{'imports': [{'path': 'java.util.ArrayList', 'static': False, 'wildcard': False}, {'path': 'java.util.List', 'static': False, 'wildcard': False}, {'path': 'java.util.Random', 'static': False, 'wildcard': False}], 'types': [{'body': [{'type': 'int'}, {'type': 'DataPoint'}, {'type': 'List'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'type': 'ArrayList'}}}], 'name': 'Cluster', 'parameters': [{'name': 'int'}]}, {'body': [{'expression': {'value': 'false'}}], 'name': 'updateCentroid', 'return_type': {'name': 'boolean'}}, {'body': [{}], 'name': 'clearDataPoints'}, {'body': [{'expression': {'arguments': [{}]}}], 'name': 'addDataPoint', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getId', 'return_type': {'name': 'int'}}, {'body': [{}], 'name': 'getCentroid', 'return_type': {'name': 'DataPoint'}}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'setCentroid', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getDataPoints', 'return_type': {'arguments': [{'type': 'DataPoint'}], 'name': 'List'}}], 'name': 'Cluster'}, {'body': [{'type': 'double'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'DataPoint', 'parameters': [{'name': 'double'}, {'name': 'double'}]}, {'body': [{'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'operator': '*'}, 'operandr': {'operator': '*'}, 'operator': '+'}]}}], 'name': 'convertDistanceTo', 'parameters': [{'name': 'DataPoint'}], 'return_type': {'name': 'double'}}, {'annotations': [{'name': 'Override'}], 'body': [{'expression': {'operandl': {'operandl': {'operandl': {'operandl': {'value': '""(""'}, 'operator': '+'}, 'operandr': {'value': '"", ""'}, 'operator': '+'}, 'operator': '+'}, 'operandr': {'value': '"")""'}, 'operator': '+'}}], 'name': 'toString', 'return_type': {'name': 'String'}}], 'name': 'DataPoint'}, {'body': [{'body': [{'type': 'List'}, {'type': 'int'}, {'type': 'int'}, {'type': 'List'}, {'type': 'Random'}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'DataPoint'}, {'expression': {'arguments': [{}]}}, {'expression': {'arguments': [{}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'body': {'statements': [{'body': {'statements': [{}]}, 'control': {'var': {'type': 'Cluster'}}}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'double'}, {'body': {'statements': [{'type': 'double'}, {'condition': {'operator': '>', 'prefix_operators': [{}]}, 'then_statement': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '='}}]}}]}, 'control': {'var': {'type': 'Cluster'}}}, {'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'type': 'boolean'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operator': '&'}}}]}, 'control': {'var': {'type': 'Cluster'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'value': '""Clusters using for loop (fixed iterations): ""'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'value': '""Cluster ""'}, 'operator': '+'}, 'operandr': {'value': '"":""'}, 'operator': '+'}]}}, {'body': {'statements': [{'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'expression': {'arguments': [{'operandl': {'value': '""Centroid: ""'}, 'operator': '+'}]}}]}, 'control': {'var': {'type': 'Cluster'}}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'KMeansAlgorithm'}]}"
KMeans,While-1,"CompilationUnit(imports=[Import(path=java.util.ArrayList, static=False, wildcard=False), Import(path=java.util.List, static=False, wildcard=False), Import(path=java.util.Random, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=dataPoints)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), name=k)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=clusters)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Random, sub_type=None)), name=random)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Random, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Cluster, sub_type=None)), name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None)], member=nextInt, postfix_operators=[], prefix_operators=[], qualifier=random, selectors=[], type_arguments=None)], member=get, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), name=randomPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=randomPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=clusters, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=k, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), WhileStatement(body=BlockStatement(label=None, statements=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[], member=clearDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=nearestCluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Double, selectors=[]), name=minDistance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)], member=distanceTo, postfix_operators=[], prefix_operators=[], qualifier=dataPoint, selectors=[], type_arguments=None), name=distance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=nearestCluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]))]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addDataPoint, postfix_operators=[], prefix_operators=[], qualifier=nearestCluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=&=, value=MethodInvocation(arguments=[], member=updateCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)]), condition=MemberReference(member=converged, postfix_operators=[], prefix_operators=['!'], qualifier=, selectors=[]), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Clusters using while loop: "")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Cluster ""), operandr=MethodInvocation(arguments=[], member=getId, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="":""), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=getDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Centroid: ""), operandr=MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=KMeansAlgorithm, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=x), VariableDeclarator(dimensions=[], initializer=None, name=y)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=double)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=DataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dx)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dy)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ReturnStatement(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=BinaryOperation(operandl=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operator=+)], member=sqrt, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=distanceTo, parameters=[FormalParameter(annotations=[], modifiers=set(), name=other, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Override)], body=[ReturnStatement(expression=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""(""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="", ""), operator=+), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="")""), operator=+), label=None)], documentation=None, modifiers={'public'}, name=toString, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=DataPoint, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=id)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=int)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=centroid)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=dataPoints)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=id, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=dataPoints, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None))), label=None)], documentation=None, modifiers={'public'}, name=Cluster, parameters=[FormalParameter(annotations=[], modifiers=set(), name=id, type=BasicType(dimensions=[], name=int), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)], documentation=None, modifiers={'public'}, name=updateCentroid, parameters=[], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[], member=clear, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=clearDataPoints, parameters=[], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=addDataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=dataPoint, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getId, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getCentroid, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=centroid, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setCentroid, parameters=[FormalParameter(annotations=[], modifiers=set(), name=centroid, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getDataPoints, parameters=[], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=Cluster, type_parameters=None)])","{'imports': [{'path': 'java.util.ArrayList', 'static': False, 'wildcard': False}, {'path': 'java.util.List', 'static': False, 'wildcard': False}, {'path': 'java.util.Random', 'static': False, 'wildcard': False}], 'types': [{'body': [{'body': [{'type': 'List'}, {'type': 'int'}, {'type': 'List'}, {'type': 'Random'}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'DataPoint'}, {'expression': {'arguments': [{}]}}, {'expression': {'arguments': [{}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'type': 'boolean'}, {'body': {'statements': [{'body': {'statements': [{}]}, 'control': {'var': {'type': 'Cluster'}}}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'double'}, {'body': {'statements': [{'type': 'double'}, {'condition': {'operator': '<'}, 'then_statement': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '='}}]}}]}, 'control': {'var': {'type': 'Cluster'}}}, {'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'type': 'boolean'}, {'body': {'statements': [{'expression': {'type': '&='}}]}, 'control': {'var': {'type': 'Cluster'}}}]}, 'condition': {'prefix_operators': [{}]}}, {'expression': {'arguments': [{'value': '""Clusters using while loop: ""'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'value': '""Cluster ""'}, 'operator': '+'}, 'operandr': {'value': '"":""'}, 'operator': '+'}]}}, {'body': {'statements': [{'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'expression': {'arguments': [{'operandl': {'value': '""Centroid: ""'}, 'operator': '+'}]}}]}, 'control': {'var': {'type': 'Cluster'}}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'KMeansAlgorithm'}, {'body': [{'type': 'double'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'DataPoint', 'parameters': [{'name': 'double'}, {'name': 'double'}]}, {'body': [{'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'operator': '*'}, 'operandr': {'operator': '*'}, 'operator': '+'}]}}], 'name': 'distanceTo', 'parameters': [{'name': 'DataPoint'}], 'return_type': {'name': 'double'}}, {'annotations': [{'name': 'Override'}], 'body': [{'expression': {'operandl': {'operandl': {'operandl': {'operandl': {'value': '""(""'}, 'operator': '+'}, 'operandr': {'value': '"", ""'}, 'operator': '+'}, 'operator': '+'}, 'operandr': {'value': '"")""'}, 'operator': '+'}}], 'name': 'toString', 'return_type': {'name': 'String'}}], 'name': 'DataPoint'}, {'body': [{'type': 'int'}, {'type': 'DataPoint'}, {'type': 'List'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'type': 'ArrayList'}}}], 'name': 'Cluster', 'parameters': [{'name': 'int'}]}, {'body': [{'expression': {'value': 'false'}}], 'name': 'updateCentroid', 'return_type': {'name': 'boolean'}}, {'body': [{}], 'name': 'clearDataPoints'}, {'body': [{'expression': {'arguments': [{}]}}], 'name': 'addDataPoint', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getId', 'return_type': {'name': 'int'}}, {'body': [{}], 'name': 'getCentroid', 'return_type': {'name': 'DataPoint'}}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'setCentroid', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getDataPoints', 'return_type': {'arguments': [{'type': 'DataPoint'}], 'name': 'List'}}], 'name': 'Cluster'}]}"
KMeans,While-10,"CompilationUnit(imports=[Import(path=java.util.ArrayList, static=False, wildcard=False), Import(path=java.util.List, static=False, wildcard=False), Import(path=java.util.Random, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=Id)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=int)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=centroid)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=dataPoints)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=Id, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=Id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=dataPoints, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None))), label=None)], documentation=None, modifiers={'public'}, name=Cluster, parameters=[FormalParameter(annotations=[], modifiers=set(), name=Id, type=BasicType(dimensions=[], name=int), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)], documentation=None, modifiers={'public'}, name=updateCentroid, parameters=[], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[], member=clear, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=clearDataPoints, parameters=[], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=addDataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=dataPoint, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=Id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getId, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getCentroid, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=centroid, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setCentroid, parameters=[FormalParameter(annotations=[], modifiers=set(), name=centroid, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getDataPoints, parameters=[], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=Cluster, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=x), VariableDeclarator(dimensions=[], initializer=None, name=y)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=double)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=DataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=another, selectors=[]), operator=-), name=dx)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=another, selectors=[]), operator=-), name=dy)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ReturnStatement(expression=MethodInvocation(arguments=[BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MethodInvocation(arguments=[MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operator=+)], member=sqrt, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=convertDistanceTo, parameters=[FormalParameter(annotations=[], modifiers=set(), name=another, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Override)], body=[ReturnStatement(expression=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""(""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="", ""), operator=+), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="")""), operator=+), label=None)], documentation=None, modifiers={'public'}, name=toString, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=DataPoint, type_parameters=None), ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=dataPoints)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), name=num_clusters)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=clusters)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Random, sub_type=None)), name=random)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Random, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Cluster, sub_type=None)), name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None)], member=nextInt, postfix_operators=[], prefix_operators=[], qualifier=random, selectors=[], type_arguments=None)], member=get, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), name=randomPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=randomPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=clusters, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=num_clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), WhileStatement(body=BlockStatement(label=None, statements=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[], member=clearDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=nearestCluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Double, selectors=[]), name=minDistance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)], member=convertDistanceTo, postfix_operators=[], prefix_operators=[], qualifier=dataPoint, selectors=[], type_arguments=None), name=distance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=nearestCluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]))]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addDataPoint, postfix_operators=[], prefix_operators=[], qualifier=nearestCluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=&=, value=MethodInvocation(arguments=[], member=updateCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)]), condition=MemberReference(member=converged, postfix_operators=[], prefix_operators=['!'], qualifier=, selectors=[]), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Clusters using while loop: "")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Cluster ""), operandr=MethodInvocation(arguments=[], member=getId, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="":""), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=getDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Centroid: ""), operandr=MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=KMeansAlgorithm, type_parameters=None)])","{'imports': [{'path': 'java.util.ArrayList', 'static': False, 'wildcard': False}, {'path': 'java.util.List', 'static': False, 'wildcard': False}, {'path': 'java.util.Random', 'static': False, 'wildcard': False}], 'types': [{'body': [{'type': 'int'}, {'type': 'DataPoint'}, {'type': 'List'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'type': 'ArrayList'}}}], 'name': 'Cluster', 'parameters': [{'name': 'int'}]}, {'body': [{'expression': {'value': 'false'}}], 'name': 'updateCentroid', 'return_type': {'name': 'boolean'}}, {'body': [{}], 'name': 'clearDataPoints'}, {'body': [{'expression': {'arguments': [{}]}}], 'name': 'addDataPoint', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getId', 'return_type': {'name': 'int'}}, {'body': [{}], 'name': 'getCentroid', 'return_type': {'name': 'DataPoint'}}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'setCentroid', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getDataPoints', 'return_type': {'arguments': [{'type': 'DataPoint'}], 'name': 'List'}}], 'name': 'Cluster'}, {'body': [{'type': 'double'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'DataPoint', 'parameters': [{'name': 'double'}, {'name': 'double'}]}, {'body': [{'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'arguments': [{}, {'value': '2'}]}, 'operandr': {'arguments': [{}, {'value': '2'}]}, 'operator': '+'}]}}], 'name': 'convertDistanceTo', 'parameters': [{'name': 'DataPoint'}], 'return_type': {'name': 'double'}}, {'annotations': [{'name': 'Override'}], 'body': [{'expression': {'operandl': {'operandl': {'operandl': {'operandl': {'value': '""(""'}, 'operator': '+'}, 'operandr': {'value': '"", ""'}, 'operator': '+'}, 'operator': '+'}, 'operandr': {'value': '"")""'}, 'operator': '+'}}], 'name': 'toString', 'return_type': {'name': 'String'}}], 'name': 'DataPoint'}, {'body': [{'body': [{'type': 'List'}, {'type': 'int'}, {'type': 'List'}, {'type': 'Random'}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'DataPoint'}, {'expression': {'arguments': [{}]}}, {'expression': {'arguments': [{}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'type': 'boolean'}, {'body': {'statements': [{'body': {'statements': [{}]}, 'control': {'var': {'type': 'Cluster'}}}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'double'}, {'body': {'statements': [{'type': 'double'}, {'condition': {'operator': '<'}, 'then_statement': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '='}}]}}]}, 'control': {'var': {'type': 'Cluster'}}}, {'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'type': 'boolean'}, {'body': {'statements': [{'expression': {'type': '&='}}]}, 'control': {'var': {'type': 'Cluster'}}}]}, 'condition': {'prefix_operators': [{}]}}, {'expression': {'arguments': [{'value': '""Clusters using while loop: ""'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'value': '""Cluster ""'}, 'operator': '+'}, 'operandr': {'value': '"":""'}, 'operator': '+'}]}}, {'body': {'statements': [{'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'expression': {'arguments': [{'operandl': {'value': '""Centroid: ""'}, 'operator': '+'}]}}]}, 'control': {'var': {'type': 'Cluster'}}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'KMeansAlgorithm'}]}"
KMeans,While-2,"CompilationUnit(imports=[Import(path=java.util.ArrayList, static=False, wildcard=False), Import(path=java.util.List, static=False, wildcard=False), Import(path=java.util.Random, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=dataPoints)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), name=k)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=clusters)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Random, sub_type=None)), name=random)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Random, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Cluster, sub_type=None)), name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None)], member=nextInt, postfix_operators=[], prefix_operators=[], qualifier=random, selectors=[], type_arguments=None)], member=get, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), name=randomPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=randomPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=clusters, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=k, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), WhileStatement(body=BlockStatement(label=None, statements=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[], member=clearDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=nearestCluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Double, selectors=[]), name=minDistance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)], member=distanceTo, postfix_operators=[], prefix_operators=[], qualifier=dataPoint, selectors=[], type_arguments=None), name=distance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=nearestCluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]))]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addDataPoint, postfix_operators=[], prefix_operators=[], qualifier=nearestCluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=&=, value=MethodInvocation(arguments=[], member=updateCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)]), condition=MemberReference(member=converged, postfix_operators=[], prefix_operators=['!'], qualifier=, selectors=[]), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Clusters using while loop: "")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Cluster ""), operandr=MethodInvocation(arguments=[], member=getId, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="":""), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=getDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Centroid: ""), operandr=MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=KMeansAlgorithm, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=x), VariableDeclarator(dimensions=[], initializer=None, name=y)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=double)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=DataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dx)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dy)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ReturnStatement(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=BinaryOperation(operandl=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operator=+)], member=sqrt, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=distanceTo, parameters=[FormalParameter(annotations=[], modifiers=set(), name=other, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Override)], body=[ReturnStatement(expression=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""(""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="", ""), operator=+), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="")""), operator=+), label=None)], documentation=None, modifiers={'public'}, name=toString, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=DataPoint, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=id)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=int)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=centroid)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=dataPoints)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=id, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=dataPoints, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None))), label=None)], documentation=None, modifiers={'public'}, name=Cluster, parameters=[FormalParameter(annotations=[], modifiers=set(), name=id, type=BasicType(dimensions=[], name=int), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)], documentation=None, modifiers={'public'}, name=updateCentroid, parameters=[], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[], member=clear, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=clearDataPoints, parameters=[], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=addDataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=dataPoint, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getId, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getCentroid, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=centroid, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setCentroid, parameters=[FormalParameter(annotations=[], modifiers=set(), name=centroid, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getDataPoints, parameters=[], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=Cluster, type_parameters=None)])","{'imports': [{'path': 'java.util.ArrayList', 'static': False, 'wildcard': False}, {'path': 'java.util.List', 'static': False, 'wildcard': False}, {'path': 'java.util.Random', 'static': False, 'wildcard': False}], 'types': [{'body': [{'body': [{'type': 'List'}, {'type': 'int'}, {'type': 'List'}, {'type': 'Random'}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'DataPoint'}, {'expression': {'arguments': [{}]}}, {'expression': {'arguments': [{}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'type': 'boolean'}, {'body': {'statements': [{'body': {'statements': [{}]}, 'control': {'var': {'type': 'Cluster'}}}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'double'}, {'body': {'statements': [{'type': 'double'}, {'condition': {'operator': '<'}, 'then_statement': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '='}}]}}]}, 'control': {'var': {'type': 'Cluster'}}}, {'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'type': 'boolean'}, {'body': {'statements': [{'expression': {'type': '&='}}]}, 'control': {'var': {'type': 'Cluster'}}}]}, 'condition': {'prefix_operators': [{}]}}, {'expression': {'arguments': [{'value': '""Clusters using while loop: ""'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'value': '""Cluster ""'}, 'operator': '+'}, 'operandr': {'value': '"":""'}, 'operator': '+'}]}}, {'body': {'statements': [{'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'expression': {'arguments': [{'operandl': {'value': '""Centroid: ""'}, 'operator': '+'}]}}]}, 'control': {'var': {'type': 'Cluster'}}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'KMeansAlgorithm'}, {'body': [{'type': 'double'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'DataPoint', 'parameters': [{'name': 'double'}, {'name': 'double'}]}, {'body': [{'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'operator': '*'}, 'operandr': {'operator': '*'}, 'operator': '+'}]}}], 'name': 'distanceTo', 'parameters': [{'name': 'DataPoint'}], 'return_type': {'name': 'double'}}, {'annotations': [{'name': 'Override'}], 'body': [{'expression': {'operandl': {'operandl': {'operandl': {'operandl': {'value': '""(""'}, 'operator': '+'}, 'operandr': {'value': '"", ""'}, 'operator': '+'}, 'operator': '+'}, 'operandr': {'value': '"")""'}, 'operator': '+'}}], 'name': 'toString', 'return_type': {'name': 'String'}}], 'name': 'DataPoint'}, {'body': [{'type': 'int'}, {'type': 'DataPoint'}, {'type': 'List'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'type': 'ArrayList'}}}], 'name': 'Cluster', 'parameters': [{'name': 'int'}]}, {'body': [{'expression': {'value': 'false'}}], 'name': 'updateCentroid', 'return_type': {'name': 'boolean'}}, {'body': [{}], 'name': 'clearDataPoints'}, {'body': [{'expression': {'arguments': [{}]}}], 'name': 'addDataPoint', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getId', 'return_type': {'name': 'int'}}, {'body': [{}], 'name': 'getCentroid', 'return_type': {'name': 'DataPoint'}}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'setCentroid', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getDataPoints', 'return_type': {'arguments': [{'type': 'DataPoint'}], 'name': 'List'}}], 'name': 'Cluster'}]}"
KMeans,While-3,"CompilationUnit(imports=[Import(path=java.util.ArrayList, static=False, wildcard=False), Import(path=java.util.List, static=False, wildcard=False), Import(path=java.util.Random, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=dataPoints)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), name=num_clusters)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=clusters)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Random, sub_type=None)), name=random)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Random, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Cluster, sub_type=None)), name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None)], member=nextInt, postfix_operators=[], prefix_operators=[], qualifier=random, selectors=[], type_arguments=None)], member=get, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), name=randomPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=randomPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=clusters, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=num_clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), WhileStatement(body=BlockStatement(label=None, statements=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[], member=clearDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=nearestCluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Double, selectors=[]), name=minDistance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)], member=distanceTo, postfix_operators=[], prefix_operators=[], qualifier=dataPoint, selectors=[], type_arguments=None), name=distance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=nearestCluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]))]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addDataPoint, postfix_operators=[], prefix_operators=[], qualifier=nearestCluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=&=, value=MethodInvocation(arguments=[], member=updateCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)]), condition=MemberReference(member=converged, postfix_operators=[], prefix_operators=['!'], qualifier=, selectors=[]), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Clusters using while loop: "")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Cluster ""), operandr=MethodInvocation(arguments=[], member=getId, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="":""), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=getDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Centroid: ""), operandr=MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=KMeansAlgorithm, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=x), VariableDeclarator(dimensions=[], initializer=None, name=y)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=double)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=DataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dx)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dy)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ReturnStatement(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=BinaryOperation(operandl=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operator=+)], member=sqrt, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=distanceTo, parameters=[FormalParameter(annotations=[], modifiers=set(), name=other, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Override)], body=[ReturnStatement(expression=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""(""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="", ""), operator=+), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="")""), operator=+), label=None)], documentation=None, modifiers={'public'}, name=toString, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=DataPoint, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=id)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=int)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=centroid)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=dataPoints)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=id, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=dataPoints, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None))), label=None)], documentation=None, modifiers={'public'}, name=Cluster, parameters=[FormalParameter(annotations=[], modifiers=set(), name=id, type=BasicType(dimensions=[], name=int), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)], documentation=None, modifiers={'public'}, name=updateCentroid, parameters=[], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[], member=clear, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=clearDataPoints, parameters=[], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=addDataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=dataPoint, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getId, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getCentroid, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=centroid, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setCentroid, parameters=[FormalParameter(annotations=[], modifiers=set(), name=centroid, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getDataPoints, parameters=[], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=Cluster, type_parameters=None)])","{'imports': [{'path': 'java.util.ArrayList', 'static': False, 'wildcard': False}, {'path': 'java.util.List', 'static': False, 'wildcard': False}, {'path': 'java.util.Random', 'static': False, 'wildcard': False}], 'types': [{'body': [{'body': [{'type': 'List'}, {'type': 'int'}, {'type': 'List'}, {'type': 'Random'}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'DataPoint'}, {'expression': {'arguments': [{}]}}, {'expression': {'arguments': [{}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'type': 'boolean'}, {'body': {'statements': [{'body': {'statements': [{}]}, 'control': {'var': {'type': 'Cluster'}}}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'double'}, {'body': {'statements': [{'type': 'double'}, {'condition': {'operator': '<'}, 'then_statement': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '='}}]}}]}, 'control': {'var': {'type': 'Cluster'}}}, {'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'type': 'boolean'}, {'body': {'statements': [{'expression': {'type': '&='}}]}, 'control': {'var': {'type': 'Cluster'}}}]}, 'condition': {'prefix_operators': [{}]}}, {'expression': {'arguments': [{'value': '""Clusters using while loop: ""'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'value': '""Cluster ""'}, 'operator': '+'}, 'operandr': {'value': '"":""'}, 'operator': '+'}]}}, {'body': {'statements': [{'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'expression': {'arguments': [{'operandl': {'value': '""Centroid: ""'}, 'operator': '+'}]}}]}, 'control': {'var': {'type': 'Cluster'}}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'KMeansAlgorithm'}, {'body': [{'type': 'double'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'DataPoint', 'parameters': [{'name': 'double'}, {'name': 'double'}]}, {'body': [{'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'operator': '*'}, 'operandr': {'operator': '*'}, 'operator': '+'}]}}], 'name': 'distanceTo', 'parameters': [{'name': 'DataPoint'}], 'return_type': {'name': 'double'}}, {'annotations': [{'name': 'Override'}], 'body': [{'expression': {'operandl': {'operandl': {'operandl': {'operandl': {'value': '""(""'}, 'operator': '+'}, 'operandr': {'value': '"", ""'}, 'operator': '+'}, 'operator': '+'}, 'operandr': {'value': '"")""'}, 'operator': '+'}}], 'name': 'toString', 'return_type': {'name': 'String'}}], 'name': 'DataPoint'}, {'body': [{'type': 'int'}, {'type': 'DataPoint'}, {'type': 'List'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'type': 'ArrayList'}}}], 'name': 'Cluster', 'parameters': [{'name': 'int'}]}, {'body': [{'expression': {'value': 'false'}}], 'name': 'updateCentroid', 'return_type': {'name': 'boolean'}}, {'body': [{}], 'name': 'clearDataPoints'}, {'body': [{'expression': {'arguments': [{}]}}], 'name': 'addDataPoint', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getId', 'return_type': {'name': 'int'}}, {'body': [{}], 'name': 'getCentroid', 'return_type': {'name': 'DataPoint'}}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'setCentroid', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getDataPoints', 'return_type': {'arguments': [{'type': 'DataPoint'}], 'name': 'List'}}], 'name': 'Cluster'}]}"
KMeans,While-4,"CompilationUnit(imports=[Import(path=java.util.ArrayList, static=False, wildcard=False), Import(path=java.util.List, static=False, wildcard=False), Import(path=java.util.Random, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=dataPoints)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), name=num_clusters)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=clusters)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Random, sub_type=None)), name=random)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Random, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Cluster, sub_type=None)), name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None)], member=nextInt, postfix_operators=[], prefix_operators=[], qualifier=random, selectors=[], type_arguments=None)], member=get, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), name=randomPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=randomPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=clusters, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=num_clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), WhileStatement(body=BlockStatement(label=None, statements=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[], member=clearDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=nearestCluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Double, selectors=[]), name=minDistance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)], member=convertDistanceTo, postfix_operators=[], prefix_operators=[], qualifier=dataPoint, selectors=[], type_arguments=None), name=distance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=nearestCluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]))]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addDataPoint, postfix_operators=[], prefix_operators=[], qualifier=nearestCluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=&=, value=MethodInvocation(arguments=[], member=updateCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)]), condition=MemberReference(member=converged, postfix_operators=[], prefix_operators=['!'], qualifier=, selectors=[]), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Clusters using while loop: "")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Cluster ""), operandr=MethodInvocation(arguments=[], member=getId, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="":""), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=getDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Centroid: ""), operandr=MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=KMeansAlgorithm, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=x), VariableDeclarator(dimensions=[], initializer=None, name=y)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=double)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=DataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dx)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dy)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ReturnStatement(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=BinaryOperation(operandl=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operator=+)], member=sqrt, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=convertDistanceTo, parameters=[FormalParameter(annotations=[], modifiers=set(), name=other, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Override)], body=[ReturnStatement(expression=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""(""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="", ""), operator=+), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="")""), operator=+), label=None)], documentation=None, modifiers={'public'}, name=toString, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=DataPoint, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=id)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=int)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=centroid)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=dataPoints)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=id, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=dataPoints, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None))), label=None)], documentation=None, modifiers={'public'}, name=Cluster, parameters=[FormalParameter(annotations=[], modifiers=set(), name=id, type=BasicType(dimensions=[], name=int), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)], documentation=None, modifiers={'public'}, name=updateCentroid, parameters=[], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[], member=clear, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=clearDataPoints, parameters=[], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=addDataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=dataPoint, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getId, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getCentroid, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=centroid, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setCentroid, parameters=[FormalParameter(annotations=[], modifiers=set(), name=centroid, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getDataPoints, parameters=[], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=Cluster, type_parameters=None)])","{'imports': [{'path': 'java.util.ArrayList', 'static': False, 'wildcard': False}, {'path': 'java.util.List', 'static': False, 'wildcard': False}, {'path': 'java.util.Random', 'static': False, 'wildcard': False}], 'types': [{'body': [{'body': [{'type': 'List'}, {'type': 'int'}, {'type': 'List'}, {'type': 'Random'}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'DataPoint'}, {'expression': {'arguments': [{}]}}, {'expression': {'arguments': [{}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'type': 'boolean'}, {'body': {'statements': [{'body': {'statements': [{}]}, 'control': {'var': {'type': 'Cluster'}}}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'double'}, {'body': {'statements': [{'type': 'double'}, {'condition': {'operator': '<'}, 'then_statement': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '='}}]}}]}, 'control': {'var': {'type': 'Cluster'}}}, {'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'type': 'boolean'}, {'body': {'statements': [{'expression': {'type': '&='}}]}, 'control': {'var': {'type': 'Cluster'}}}]}, 'condition': {'prefix_operators': [{}]}}, {'expression': {'arguments': [{'value': '""Clusters using while loop: ""'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'value': '""Cluster ""'}, 'operator': '+'}, 'operandr': {'value': '"":""'}, 'operator': '+'}]}}, {'body': {'statements': [{'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'expression': {'arguments': [{'operandl': {'value': '""Centroid: ""'}, 'operator': '+'}]}}]}, 'control': {'var': {'type': 'Cluster'}}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'KMeansAlgorithm'}, {'body': [{'type': 'double'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'DataPoint', 'parameters': [{'name': 'double'}, {'name': 'double'}]}, {'body': [{'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'operator': '*'}, 'operandr': {'operator': '*'}, 'operator': '+'}]}}], 'name': 'convertDistanceTo', 'parameters': [{'name': 'DataPoint'}], 'return_type': {'name': 'double'}}, {'annotations': [{'name': 'Override'}], 'body': [{'expression': {'operandl': {'operandl': {'operandl': {'operandl': {'value': '""(""'}, 'operator': '+'}, 'operandr': {'value': '"", ""'}, 'operator': '+'}, 'operator': '+'}, 'operandr': {'value': '"")""'}, 'operator': '+'}}], 'name': 'toString', 'return_type': {'name': 'String'}}], 'name': 'DataPoint'}, {'body': [{'type': 'int'}, {'type': 'DataPoint'}, {'type': 'List'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'type': 'ArrayList'}}}], 'name': 'Cluster', 'parameters': [{'name': 'int'}]}, {'body': [{'expression': {'value': 'false'}}], 'name': 'updateCentroid', 'return_type': {'name': 'boolean'}}, {'body': [{}], 'name': 'clearDataPoints'}, {'body': [{'expression': {'arguments': [{}]}}], 'name': 'addDataPoint', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getId', 'return_type': {'name': 'int'}}, {'body': [{}], 'name': 'getCentroid', 'return_type': {'name': 'DataPoint'}}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'setCentroid', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getDataPoints', 'return_type': {'arguments': [{'type': 'DataPoint'}], 'name': 'List'}}], 'name': 'Cluster'}]}"
KMeans,While-5,"CompilationUnit(imports=[Import(path=java.util.ArrayList, static=False, wildcard=False), Import(path=java.util.List, static=False, wildcard=False), Import(path=java.util.Random, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=dataPoints)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), name=num_clusters)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=clusters)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Random, sub_type=None)), name=random)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Random, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Cluster, sub_type=None)), name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None)], member=nextInt, postfix_operators=[], prefix_operators=[], qualifier=random, selectors=[], type_arguments=None)], member=get, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), name=randomPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=randomPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=clusters, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=num_clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), WhileStatement(body=BlockStatement(label=None, statements=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[], member=clearDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=nearestCluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Double, selectors=[]), name=minDistance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)], member=convertDistanceTo, postfix_operators=[], prefix_operators=[], qualifier=dataPoint, selectors=[], type_arguments=None), name=distance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=nearestCluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]))]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addDataPoint, postfix_operators=[], prefix_operators=[], qualifier=nearestCluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=&=, value=MethodInvocation(arguments=[], member=updateCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)]), condition=MemberReference(member=converged, postfix_operators=[], prefix_operators=['!'], qualifier=, selectors=[]), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Clusters using while loop: "")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Cluster ""), operandr=MethodInvocation(arguments=[], member=getId, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="":""), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=getDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Centroid: ""), operandr=MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=KMeansAlgorithm, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=x), VariableDeclarator(dimensions=[], initializer=None, name=y)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=double)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=DataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dx)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dy)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ReturnStatement(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=BinaryOperation(operandl=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operator=+)], member=sqrt, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=convertDistanceTo, parameters=[FormalParameter(annotations=[], modifiers=set(), name=other, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Override)], body=[ReturnStatement(expression=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""(""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="", ""), operator=+), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="")""), operator=+), label=None)], documentation=None, modifiers={'public'}, name=toString, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=DataPoint, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=id)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=int)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=centroid)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=dataPoints)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=id, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=dataPoints, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None))), label=None)], documentation=None, modifiers={'public'}, name=Cluster, parameters=[FormalParameter(annotations=[], modifiers=set(), name=id, type=BasicType(dimensions=[], name=int), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)], documentation=None, modifiers={'public'}, name=updateCentroid, parameters=[], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[], member=clear, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=clearDataPoints, parameters=[], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=addDataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=dataPoint, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getId, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getCentroid, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=centroid, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setCentroid, parameters=[FormalParameter(annotations=[], modifiers=set(), name=centroid, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getDataPoints, parameters=[], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=Cluster, type_parameters=None)])","{'imports': [{'path': 'java.util.ArrayList', 'static': False, 'wildcard': False}, {'path': 'java.util.List', 'static': False, 'wildcard': False}, {'path': 'java.util.Random', 'static': False, 'wildcard': False}], 'types': [{'body': [{'body': [{'type': 'List'}, {'type': 'int'}, {'type': 'List'}, {'type': 'Random'}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'DataPoint'}, {'expression': {'arguments': [{}]}}, {'expression': {'arguments': [{}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'type': 'boolean'}, {'body': {'statements': [{'body': {'statements': [{}]}, 'control': {'var': {'type': 'Cluster'}}}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'double'}, {'body': {'statements': [{'type': 'double'}, {'condition': {'operator': '>', 'prefix_operators': [{}]}, 'then_statement': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '='}}]}}]}, 'control': {'var': {'type': 'Cluster'}}}, {'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'type': 'boolean'}, {'body': {'statements': [{'expression': {'type': '&='}}]}, 'control': {'var': {'type': 'Cluster'}}}]}, 'condition': {'prefix_operators': [{}]}}, {'expression': {'arguments': [{'value': '""Clusters using while loop: ""'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'value': '""Cluster ""'}, 'operator': '+'}, 'operandr': {'value': '"":""'}, 'operator': '+'}]}}, {'body': {'statements': [{'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'expression': {'arguments': [{'operandl': {'value': '""Centroid: ""'}, 'operator': '+'}]}}]}, 'control': {'var': {'type': 'Cluster'}}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'KMeansAlgorithm'}, {'body': [{'type': 'double'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'DataPoint', 'parameters': [{'name': 'double'}, {'name': 'double'}]}, {'body': [{'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'operator': '*'}, 'operandr': {'operator': '*'}, 'operator': '+'}]}}], 'name': 'convertDistanceTo', 'parameters': [{'name': 'DataPoint'}], 'return_type': {'name': 'double'}}, {'annotations': [{'name': 'Override'}], 'body': [{'expression': {'operandl': {'operandl': {'operandl': {'operandl': {'value': '""(""'}, 'operator': '+'}, 'operandr': {'value': '"", ""'}, 'operator': '+'}, 'operator': '+'}, 'operandr': {'value': '"")""'}, 'operator': '+'}}], 'name': 'toString', 'return_type': {'name': 'String'}}], 'name': 'DataPoint'}, {'body': [{'type': 'int'}, {'type': 'DataPoint'}, {'type': 'List'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'type': 'ArrayList'}}}], 'name': 'Cluster', 'parameters': [{'name': 'int'}]}, {'body': [{'expression': {'value': 'false'}}], 'name': 'updateCentroid', 'return_type': {'name': 'boolean'}}, {'body': [{}], 'name': 'clearDataPoints'}, {'body': [{'expression': {'arguments': [{}]}}], 'name': 'addDataPoint', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getId', 'return_type': {'name': 'int'}}, {'body': [{}], 'name': 'getCentroid', 'return_type': {'name': 'DataPoint'}}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'setCentroid', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getDataPoints', 'return_type': {'arguments': [{'type': 'DataPoint'}], 'name': 'List'}}], 'name': 'Cluster'}]}"
KMeans,While-6,"CompilationUnit(imports=[Import(path=java.util.ArrayList, static=False, wildcard=False), Import(path=java.util.List, static=False, wildcard=False), Import(path=java.util.Random, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=dataPoints)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), name=num_clusters)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=clusters)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Random, sub_type=None)), name=random)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Random, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Cluster, sub_type=None)), name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None)], member=nextInt, postfix_operators=[], prefix_operators=[], qualifier=random, selectors=[], type_arguments=None)], member=get, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), name=randomPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=randomPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=clusters, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=num_clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), WhileStatement(body=BlockStatement(label=None, statements=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[], member=clearDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=nearestCluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Double, selectors=[]), name=minDistance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)], member=convertDistanceTo, postfix_operators=[], prefix_operators=[], qualifier=dataPoint, selectors=[], type_arguments=None), name=distance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=nearestCluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]))]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addDataPoint, postfix_operators=[], prefix_operators=[], qualifier=nearestCluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MethodInvocation(arguments=[], member=updateCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=&)), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)]), condition=MemberReference(member=converged, postfix_operators=[], prefix_operators=['!'], qualifier=, selectors=[]), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Clusters using while loop: "")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Cluster ""), operandr=MethodInvocation(arguments=[], member=getId, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="":""), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=getDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Centroid: ""), operandr=MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=KMeansAlgorithm, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=x), VariableDeclarator(dimensions=[], initializer=None, name=y)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=double)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=DataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dx)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=-), name=dy)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ReturnStatement(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=BinaryOperation(operandl=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operator=+)], member=sqrt, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=convertDistanceTo, parameters=[FormalParameter(annotations=[], modifiers=set(), name=other, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Override)], body=[ReturnStatement(expression=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""(""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="", ""), operator=+), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="")""), operator=+), label=None)], documentation=None, modifiers={'public'}, name=toString, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=DataPoint, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=Id)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=int)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=centroid)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=dataPoints)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=Id, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=Id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=dataPoints, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None))), label=None)], documentation=None, modifiers={'public'}, name=Cluster, parameters=[FormalParameter(annotations=[], modifiers=set(), name=Id, type=BasicType(dimensions=[], name=int), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)], documentation=None, modifiers={'public'}, name=updateCentroid, parameters=[], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[], member=clear, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=clearDataPoints, parameters=[], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=addDataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=dataPoint, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=Id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getId, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getCentroid, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=centroid, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setCentroid, parameters=[FormalParameter(annotations=[], modifiers=set(), name=centroid, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getDataPoints, parameters=[], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=Cluster, type_parameters=None)])","{'imports': [{'path': 'java.util.ArrayList', 'static': False, 'wildcard': False}, {'path': 'java.util.List', 'static': False, 'wildcard': False}, {'path': 'java.util.Random', 'static': False, 'wildcard': False}], 'types': [{'body': [{'body': [{'type': 'List'}, {'type': 'int'}, {'type': 'List'}, {'type': 'Random'}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'DataPoint'}, {'expression': {'arguments': [{}]}}, {'expression': {'arguments': [{}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'type': 'boolean'}, {'body': {'statements': [{'body': {'statements': [{}]}, 'control': {'var': {'type': 'Cluster'}}}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'double'}, {'body': {'statements': [{'type': 'double'}, {'condition': {'operator': '<'}, 'then_statement': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '='}}]}}]}, 'control': {'var': {'type': 'Cluster'}}}, {'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'type': 'boolean'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operator': '&'}}}]}, 'control': {'var': {'type': 'Cluster'}}}]}, 'condition': {'prefix_operators': [{}]}}, {'expression': {'arguments': [{'value': '""Clusters using while loop: ""'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'value': '""Cluster ""'}, 'operator': '+'}, 'operandr': {'value': '"":""'}, 'operator': '+'}]}}, {'body': {'statements': [{'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'expression': {'arguments': [{'operandl': {'value': '""Centroid: ""'}, 'operator': '+'}]}}]}, 'control': {'var': {'type': 'Cluster'}}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'KMeansAlgorithm'}, {'body': [{'type': 'double'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'DataPoint', 'parameters': [{'name': 'double'}, {'name': 'double'}]}, {'body': [{'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'operator': '*'}, 'operandr': {'operator': '*'}, 'operator': '+'}]}}], 'name': 'convertDistanceTo', 'parameters': [{'name': 'DataPoint'}], 'return_type': {'name': 'double'}}, {'annotations': [{'name': 'Override'}], 'body': [{'expression': {'operandl': {'operandl': {'operandl': {'operandl': {'value': '""(""'}, 'operator': '+'}, 'operandr': {'value': '"", ""'}, 'operator': '+'}, 'operator': '+'}, 'operandr': {'value': '"")""'}, 'operator': '+'}}], 'name': 'toString', 'return_type': {'name': 'String'}}], 'name': 'DataPoint'}, {'body': [{'type': 'int'}, {'type': 'DataPoint'}, {'type': 'List'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'type': 'ArrayList'}}}], 'name': 'Cluster', 'parameters': [{'name': 'int'}]}, {'body': [{'expression': {'value': 'false'}}], 'name': 'updateCentroid', 'return_type': {'name': 'boolean'}}, {'body': [{}], 'name': 'clearDataPoints'}, {'body': [{'expression': {'arguments': [{}]}}], 'name': 'addDataPoint', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getId', 'return_type': {'name': 'int'}}, {'body': [{}], 'name': 'getCentroid', 'return_type': {'name': 'DataPoint'}}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'setCentroid', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getDataPoints', 'return_type': {'arguments': [{'type': 'DataPoint'}], 'name': 'List'}}], 'name': 'Cluster'}]}"
KMeans,While-7,"CompilationUnit(imports=[Import(path=java.util.ArrayList, static=False, wildcard=False), Import(path=java.util.List, static=False, wildcard=False), Import(path=java.util.Random, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=dataPoints)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), name=num_clusters)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=clusters)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Random, sub_type=None)), name=random)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Random, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Cluster, sub_type=None)), name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None)], member=nextInt, postfix_operators=[], prefix_operators=[], qualifier=random, selectors=[], type_arguments=None)], member=get, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), name=randomPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=randomPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=clusters, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=num_clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), WhileStatement(body=BlockStatement(label=None, statements=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[], member=clearDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=nearestCluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Double, selectors=[]), name=minDistance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)], member=convertDistanceTo, postfix_operators=[], prefix_operators=[], qualifier=dataPoint, selectors=[], type_arguments=None), name=distance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=nearestCluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]))]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addDataPoint, postfix_operators=[], prefix_operators=[], qualifier=nearestCluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MethodInvocation(arguments=[], member=updateCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=&)), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)]), condition=MemberReference(member=converged, postfix_operators=[], prefix_operators=['!'], qualifier=, selectors=[]), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Clusters using while loop: "")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Cluster ""), operandr=MethodInvocation(arguments=[], member=getId, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="":""), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=getDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Centroid: ""), operandr=MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=KMeansAlgorithm, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=x), VariableDeclarator(dimensions=[], initializer=None, name=y)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=double)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=DataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=another, selectors=[]), operator=-), name=dx)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=another, selectors=[]), operator=-), name=dy)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ReturnStatement(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=BinaryOperation(operandl=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operator=+)], member=sqrt, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=convertDistanceTo, parameters=[FormalParameter(annotations=[], modifiers=set(), name=another, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Override)], body=[ReturnStatement(expression=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""(""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="", ""), operator=+), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="")""), operator=+), label=None)], documentation=None, modifiers={'public'}, name=toString, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=DataPoint, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=Id)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=int)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=centroid)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=dataPoints)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=Id, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=Id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=dataPoints, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None))), label=None)], documentation=None, modifiers={'public'}, name=Cluster, parameters=[FormalParameter(annotations=[], modifiers=set(), name=Id, type=BasicType(dimensions=[], name=int), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)], documentation=None, modifiers={'public'}, name=updateCentroid, parameters=[], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[], member=clear, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=clearDataPoints, parameters=[], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=addDataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=dataPoint, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=Id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getId, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getCentroid, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=centroid, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setCentroid, parameters=[FormalParameter(annotations=[], modifiers=set(), name=centroid, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getDataPoints, parameters=[], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=Cluster, type_parameters=None)])","{'imports': [{'path': 'java.util.ArrayList', 'static': False, 'wildcard': False}, {'path': 'java.util.List', 'static': False, 'wildcard': False}, {'path': 'java.util.Random', 'static': False, 'wildcard': False}], 'types': [{'body': [{'body': [{'type': 'List'}, {'type': 'int'}, {'type': 'List'}, {'type': 'Random'}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'DataPoint'}, {'expression': {'arguments': [{}]}}, {'expression': {'arguments': [{}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'type': 'boolean'}, {'body': {'statements': [{'body': {'statements': [{}]}, 'control': {'var': {'type': 'Cluster'}}}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'double'}, {'body': {'statements': [{'type': 'double'}, {'condition': {'operator': '>', 'prefix_operators': [{}]}, 'then_statement': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '='}}]}}]}, 'control': {'var': {'type': 'Cluster'}}}, {'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'type': 'boolean'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operator': '&'}}}]}, 'control': {'var': {'type': 'Cluster'}}}]}, 'condition': {'prefix_operators': [{}]}}, {'expression': {'arguments': [{'value': '""Clusters using while loop: ""'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'value': '""Cluster ""'}, 'operator': '+'}, 'operandr': {'value': '"":""'}, 'operator': '+'}]}}, {'body': {'statements': [{'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'expression': {'arguments': [{'operandl': {'value': '""Centroid: ""'}, 'operator': '+'}]}}]}, 'control': {'var': {'type': 'Cluster'}}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'KMeansAlgorithm'}, {'body': [{'type': 'double'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'DataPoint', 'parameters': [{'name': 'double'}, {'name': 'double'}]}, {'body': [{'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'operator': '*'}, 'operandr': {'operator': '*'}, 'operator': '+'}]}}], 'name': 'convertDistanceTo', 'parameters': [{'name': 'DataPoint'}], 'return_type': {'name': 'double'}}, {'annotations': [{'name': 'Override'}], 'body': [{'expression': {'operandl': {'operandl': {'operandl': {'operandl': {'value': '""(""'}, 'operator': '+'}, 'operandr': {'value': '"", ""'}, 'operator': '+'}, 'operator': '+'}, 'operandr': {'value': '"")""'}, 'operator': '+'}}], 'name': 'toString', 'return_type': {'name': 'String'}}], 'name': 'DataPoint'}, {'body': [{'type': 'int'}, {'type': 'DataPoint'}, {'type': 'List'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'type': 'ArrayList'}}}], 'name': 'Cluster', 'parameters': [{'name': 'int'}]}, {'body': [{'expression': {'value': 'false'}}], 'name': 'updateCentroid', 'return_type': {'name': 'boolean'}}, {'body': [{}], 'name': 'clearDataPoints'}, {'body': [{'expression': {'arguments': [{}]}}], 'name': 'addDataPoint', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getId', 'return_type': {'name': 'int'}}, {'body': [{}], 'name': 'getCentroid', 'return_type': {'name': 'DataPoint'}}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'setCentroid', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getDataPoints', 'return_type': {'arguments': [{'type': 'DataPoint'}], 'name': 'List'}}], 'name': 'Cluster'}]}"
KMeans,While-8,"CompilationUnit(imports=[Import(path=java.util.ArrayList, static=False, wildcard=False), Import(path=java.util.List, static=False, wildcard=False), Import(path=java.util.Random, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=x), VariableDeclarator(dimensions=[], initializer=None, name=y)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=double)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=DataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=another, selectors=[]), operator=-), name=dx)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=another, selectors=[]), operator=-), name=dy)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ReturnStatement(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=BinaryOperation(operandl=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operator=+)], member=sqrt, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=convertDistanceTo, parameters=[FormalParameter(annotations=[], modifiers=set(), name=another, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Override)], body=[ReturnStatement(expression=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""(""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="", ""), operator=+), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="")""), operator=+), label=None)], documentation=None, modifiers={'public'}, name=toString, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=DataPoint, type_parameters=None), ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=dataPoints)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), name=num_clusters)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=clusters)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Random, sub_type=None)), name=random)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Random, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Cluster, sub_type=None)), name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None)], member=nextInt, postfix_operators=[], prefix_operators=[], qualifier=random, selectors=[], type_arguments=None)], member=get, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), name=randomPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=randomPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=clusters, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=num_clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), WhileStatement(body=BlockStatement(label=None, statements=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[], member=clearDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=nearestCluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Double, selectors=[]), name=minDistance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)], member=convertDistanceTo, postfix_operators=[], prefix_operators=[], qualifier=dataPoint, selectors=[], type_arguments=None), name=distance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=nearestCluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]))]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addDataPoint, postfix_operators=[], prefix_operators=[], qualifier=nearestCluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=&=, value=MethodInvocation(arguments=[], member=updateCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)]), condition=MemberReference(member=converged, postfix_operators=[], prefix_operators=['!'], qualifier=, selectors=[]), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Clusters: "")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Cluster ""), operandr=MethodInvocation(arguments=[], member=getId, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="":""), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=getDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Centroid: ""), operandr=MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=KMeansAlgorithm, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=Id)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=int)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=centroid)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=dataPoints)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=Id, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=Id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=dataPoints, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None))), label=None)], documentation=None, modifiers={'public'}, name=Cluster, parameters=[FormalParameter(annotations=[], modifiers=set(), name=Id, type=BasicType(dimensions=[], name=int), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)], documentation=None, modifiers={'public'}, name=updateCentroid, parameters=[], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[], member=clear, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=clearDataPoints, parameters=[], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=addDataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=dataPoint, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=Id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getId, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getCentroid, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=centroid, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setCentroid, parameters=[FormalParameter(annotations=[], modifiers=set(), name=centroid, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getDataPoints, parameters=[], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=Cluster, type_parameters=None)])","{'imports': [{'path': 'java.util.ArrayList', 'static': False, 'wildcard': False}, {'path': 'java.util.List', 'static': False, 'wildcard': False}, {'path': 'java.util.Random', 'static': False, 'wildcard': False}], 'types': [{'body': [{'type': 'double'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'DataPoint', 'parameters': [{'name': 'double'}, {'name': 'double'}]}, {'body': [{'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'operator': '*'}, 'operandr': {'operator': '*'}, 'operator': '+'}]}}], 'name': 'convertDistanceTo', 'parameters': [{'name': 'DataPoint'}], 'return_type': {'name': 'double'}}, {'annotations': [{'name': 'Override'}], 'body': [{'expression': {'operandl': {'operandl': {'operandl': {'operandl': {'value': '""(""'}, 'operator': '+'}, 'operandr': {'value': '"", ""'}, 'operator': '+'}, 'operator': '+'}, 'operandr': {'value': '"")""'}, 'operator': '+'}}], 'name': 'toString', 'return_type': {'name': 'String'}}], 'name': 'DataPoint'}, {'body': [{'body': [{'type': 'List'}, {'type': 'int'}, {'type': 'List'}, {'type': 'Random'}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'DataPoint'}, {'expression': {'arguments': [{}]}}, {'expression': {'arguments': [{}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'type': 'boolean'}, {'body': {'statements': [{'body': {'statements': [{}]}, 'control': {'var': {'type': 'Cluster'}}}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'double'}, {'body': {'statements': [{'type': 'double'}, {'condition': {'operator': '<'}, 'then_statement': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '='}}]}}]}, 'control': {'var': {'type': 'Cluster'}}}, {'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'type': 'boolean'}, {'body': {'statements': [{'expression': {'type': '&='}}]}, 'control': {'var': {'type': 'Cluster'}}}]}, 'condition': {'prefix_operators': [{}]}}, {'expression': {'arguments': [{'value': '""Clusters: ""'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'value': '""Cluster ""'}, 'operator': '+'}, 'operandr': {'value': '"":""'}, 'operator': '+'}]}}, {'body': {'statements': [{'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'expression': {'arguments': [{'operandl': {'value': '""Centroid: ""'}, 'operator': '+'}]}}]}, 'control': {'var': {'type': 'Cluster'}}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'KMeansAlgorithm'}, {'body': [{'type': 'int'}, {'type': 'DataPoint'}, {'type': 'List'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'type': 'ArrayList'}}}], 'name': 'Cluster', 'parameters': [{'name': 'int'}]}, {'body': [{'expression': {'value': 'false'}}], 'name': 'updateCentroid', 'return_type': {'name': 'boolean'}}, {'body': [{}], 'name': 'clearDataPoints'}, {'body': [{'expression': {'arguments': [{}]}}], 'name': 'addDataPoint', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getId', 'return_type': {'name': 'int'}}, {'body': [{}], 'name': 'getCentroid', 'return_type': {'name': 'DataPoint'}}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'setCentroid', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getDataPoints', 'return_type': {'arguments': [{'type': 'DataPoint'}], 'name': 'List'}}], 'name': 'Cluster'}]}"
KMeans,While-9,"CompilationUnit(imports=[Import(path=java.util.ArrayList, static=False, wildcard=False), Import(path=java.util.List, static=False, wildcard=False), Import(path=java.util.Random, static=False, wildcard=False)], package=None, types=[ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=Id)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=int)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=centroid)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=dataPoints)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=Id, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=Id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=dataPoints, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None))), label=None)], documentation=None, modifiers={'public'}, name=Cluster, parameters=[FormalParameter(annotations=[], modifiers=set(), name=Id, type=BasicType(dimensions=[], name=int), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)], documentation=None, modifiers={'public'}, name=updateCentroid, parameters=[], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[], member=clear, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=clearDataPoints, parameters=[], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=addDataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=dataPoint, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=Id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getId, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getCentroid, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=centroid, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=centroid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setCentroid, parameters=[FormalParameter(annotations=[], modifiers=set(), name=centroid, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getDataPoints, parameters=[], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=Cluster, type_parameters=None), ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=x), VariableDeclarator(dimensions=[], initializer=None, name=y)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=double)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=DataPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=x, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=another, selectors=[]), operator=-), name=dx)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=y, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=another, selectors=[]), operator=-), name=dy)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ReturnStatement(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=BinaryOperation(operandl=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operator=+)], member=sqrt, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public'}, name=convertDistanceTo, parameters=[FormalParameter(annotations=[], modifiers=set(), name=another, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Override)], body=[ReturnStatement(expression=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""(""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="", ""), operator=+), operandr=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="")""), operator=+), label=None)], documentation=None, modifiers={'public'}, name=toString, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers=set(), name=DataPoint, type_parameters=None), ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=dataPoints)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), name=num_clusters)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=clusters)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Random, sub_type=None)), name=random)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Random, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Cluster, sub_type=None)), name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None)], member=nextInt, postfix_operators=[], prefix_operators=[], qualifier=random, selectors=[], type_arguments=None)], member=get, postfix_operators=[], prefix_operators=[], qualifier=dataPoints, selectors=[], type_arguments=None), name=randomPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=randomPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=clusters, selectors=[], type_arguments=None), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=num_clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), WhileStatement(body=BlockStatement(label=None, statements=[ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[], member=clearDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=nearestCluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Double, selectors=[]), name=minDistance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), ForStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)], member=convertDistanceTo, postfix_operators=[], prefix_operators=[], qualifier=dataPoint, selectors=[], type_arguments=None), name=distance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=minDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=distance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=nearestCluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=cluster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]))]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addDataPoint, postfix_operators=[], prefix_operators=[], qualifier=nearestCluster, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=dataPoints, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), name=converged)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=converged, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=&=, value=MethodInvocation(arguments=[], member=updateCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None)), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)]), condition=MemberReference(member=converged, postfix_operators=[], prefix_operators=['!'], qualifier=, selectors=[]), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Clusters using while loop: "")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Cluster ""), operandr=MethodInvocation(arguments=[], member=getId, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="":""), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=getDataPoints, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dataPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DataPoint, sub_type=None))), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Centroid: ""), operandr=MethodInvocation(arguments=[], member=getCentroid, postfix_operators=[], prefix_operators=[], qualifier=cluster, selectors=[], type_arguments=None), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=clusters, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=cluster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Cluster, sub_type=None))), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=KMeansAlgorithm, type_parameters=None)])","{'imports': [{'path': 'java.util.ArrayList', 'static': False, 'wildcard': False}, {'path': 'java.util.List', 'static': False, 'wildcard': False}, {'path': 'java.util.Random', 'static': False, 'wildcard': False}], 'types': [{'body': [{'type': 'int'}, {'type': 'DataPoint'}, {'type': 'List'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '=', 'value': {'type': 'ArrayList'}}}], 'name': 'Cluster', 'parameters': [{'name': 'int'}]}, {'body': [{'expression': {'value': 'false'}}], 'name': 'updateCentroid', 'return_type': {'name': 'boolean'}}, {'body': [{}], 'name': 'clearDataPoints'}, {'body': [{'expression': {'arguments': [{}]}}], 'name': 'addDataPoint', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getId', 'return_type': {'name': 'int'}}, {'body': [{}], 'name': 'getCentroid', 'return_type': {'name': 'DataPoint'}}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'setCentroid', 'parameters': [{'name': 'DataPoint'}]}, {'body': [{}], 'name': 'getDataPoints', 'return_type': {'arguments': [{'type': 'DataPoint'}], 'name': 'List'}}], 'name': 'Cluster'}, {'body': [{'type': 'double'}, {'body': [{'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}, {'expression': {'expressionl': {'selectors': [{}]}, 'type': '='}}], 'name': 'DataPoint', 'parameters': [{'name': 'double'}, {'name': 'double'}]}, {'body': [{'type': 'double'}, {'type': 'double'}, {'expression': {'arguments': [{'operandl': {'operator': '*'}, 'operandr': {'operator': '*'}, 'operator': '+'}]}}], 'name': 'convertDistanceTo', 'parameters': [{'name': 'DataPoint'}], 'return_type': {'name': 'double'}}, {'annotations': [{'name': 'Override'}], 'body': [{'expression': {'operandl': {'operandl': {'operandl': {'operandl': {'value': '""(""'}, 'operator': '+'}, 'operandr': {'value': '"", ""'}, 'operator': '+'}, 'operator': '+'}, 'operandr': {'value': '"")""'}, 'operator': '+'}}], 'name': 'toString', 'return_type': {'name': 'String'}}], 'name': 'DataPoint'}, {'body': [{'body': [{'type': 'List'}, {'type': 'int'}, {'type': 'List'}, {'type': 'Random'}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'DataPoint'}, {'expression': {'arguments': [{}]}}, {'expression': {'arguments': [{}]}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'type': 'boolean'}, {'body': {'statements': [{'body': {'statements': [{}]}, 'control': {'var': {'type': 'Cluster'}}}, {'body': {'statements': [{'type': 'Cluster'}, {'type': 'double'}, {'body': {'statements': [{'type': 'double'}, {'condition': {'operator': '<'}, 'then_statement': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '='}}]}}]}, 'control': {'var': {'type': 'Cluster'}}}, {'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'type': 'boolean'}, {'body': {'statements': [{'expression': {'type': '&='}}]}, 'control': {'var': {'type': 'Cluster'}}}]}, 'condition': {'prefix_operators': [{}]}}, {'expression': {'arguments': [{'value': '""Clusters using while loop: ""'}]}}, {'body': {'statements': [{'expression': {'arguments': [{'operandl': {'operandl': {'value': '""Cluster ""'}, 'operator': '+'}, 'operandr': {'value': '"":""'}, 'operator': '+'}]}}, {'body': {'statements': [{'expression': {'arguments': [{}]}}]}, 'control': {'var': {'type': 'DataPoint'}}}, {'expression': {'arguments': [{'operandl': {'value': '""Centroid: ""'}, 'operator': '+'}]}}]}, 'control': {'var': {'type': 'Cluster'}}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'KMeansAlgorithm'}]}"
NewtonRaphsonMethod,Do-While-1,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=n)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=epsilon)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=initialGuess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), DoStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=+), operator=*)), label=None)]), condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=epsilon, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using do-while loop: ""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandr': {'operator': '/'}, 'operator': '+'}, 'operator': '*'}}}]}, 'condition': {'operandl': {'arguments': [{'operandl': {'operator': '*'}, 'operator': '-'}]}, 'operator': '>'}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using do-while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,Do-While-10,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=tolerance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=Guess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=num)], modifiers=set(), type=BasicType(dimensions=[], name=double)), DoStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=*)), label=None)]), condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=tolerance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using do-while loop: ""), operandr=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandl': {'operandl': {'operator': '*'}, 'operator': '+'}, 'operator': '/'}, 'operator': '*'}}}]}, 'condition': {'operandl': {'arguments': [{'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}]}, 'operator': '>'}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using do-while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,Do-While-11,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=tolerance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=Guess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=num)], modifiers=set(), type=BasicType(dimensions=[], name=double)), DoStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=*)), label=None)]), condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=tolerance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using do-while loop: ""), operandr=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandl': {'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '+'}, 'operator': '/'}, 'operator': '*'}}}]}, 'condition': {'operandl': {'arguments': [{'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}]}, 'operator': '>'}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using do-while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,Do-While-12,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=tolerance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=Guess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=num)], modifiers=set(), type=BasicType(dimensions=[], name=double)), DoStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=*)), label=None)]), condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=tolerance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandl': {'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '+'}, 'operator': '/'}, 'operator': '*'}}}]}, 'condition': {'operandl': {'arguments': [{'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}]}, 'operator': '>'}}, {'expression': {'arguments': [{}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,Do-While-2,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=epsilon)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=initialGuess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), DoStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=+), operator=*)), label=None)]), condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=epsilon, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using do-while loop: ""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandr': {'operator': '/'}, 'operator': '+'}, 'operator': '*'}}}]}, 'condition': {'operandl': {'arguments': [{'operandl': {'operator': '*'}, 'operator': '-'}]}, 'operator': '>'}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using do-while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,Do-While-3,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=tolerance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=initialGuess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), DoStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=+), operator=*)), label=None)]), condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=tolerance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using do-while loop: ""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandr': {'operator': '/'}, 'operator': '+'}, 'operator': '*'}}}]}, 'condition': {'operandl': {'arguments': [{'operandl': {'operator': '*'}, 'operator': '-'}]}, 'operator': '>'}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using do-while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,Do-While-4,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=tolerance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=initialGuess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), DoStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=+), operator=*)), label=None)]), condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=tolerance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandr': {'operator': '/'}, 'operator': '+'}, 'operator': '*'}}}]}, 'condition': {'operandl': {'arguments': [{'operandl': {'operator': '*'}, 'operator': '-'}]}, 'operator': '>'}}, {'expression': {'arguments': [{}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,Do-While-5,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=tolerance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=initialGuess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=num)], modifiers=set(), type=BasicType(dimensions=[], name=double)), DoStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=+), operator=*)), label=None)]), condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=tolerance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using do-while loop: ""), operandr=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandr': {'operator': '/'}, 'operator': '+'}, 'operator': '*'}}}]}, 'condition': {'operandl': {'arguments': [{'operandl': {'operator': '*'}, 'operator': '-'}]}, 'operator': '>'}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using do-while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,Do-While-6,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=tolerance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=initialGuess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=num)], modifiers=set(), type=BasicType(dimensions=[], name=double)), DoStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=+), operator=*)), label=None)]), condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=tolerance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using do-while loop: ""), operandr=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandr': {'operator': '/'}, 'operator': '+'}, 'operator': '*'}}}]}, 'condition': {'operandl': {'arguments': [{'operandl': {'operator': '*'}, 'operator': '-'}]}, 'operator': '>'}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using do-while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,Do-While-7,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=tolerance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=Guess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=num)], modifiers=set(), type=BasicType(dimensions=[], name=double)), DoStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=+), operator=*)), label=None)]), condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=tolerance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using do-while loop: ""), operandr=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandr': {'operator': '/'}, 'operator': '+'}, 'operator': '*'}}}]}, 'condition': {'operandl': {'arguments': [{'operandl': {'operator': '*'}, 'operator': '-'}]}, 'operator': '>'}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using do-while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,Do-While-8,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=tolerance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=Guess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=num)], modifiers=set(), type=BasicType(dimensions=[], name=double)), DoStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=*)), label=None)]), condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=tolerance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using do-while loop: ""), operandr=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandl': {'operandl': {'operator': '*'}, 'operator': '+'}, 'operator': '/'}, 'operator': '*'}}}]}, 'condition': {'operandl': {'arguments': [{'operandl': {'operator': '*'}, 'operator': '-'}]}, 'operator': '>'}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using do-while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,Do-While-9,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=tolerance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=Guess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=num)], modifiers=set(), type=BasicType(dimensions=[], name=double)), DoStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=*)), label=None)]), condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=tolerance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using do-while loop: ""), operandr=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '='}}, {'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandl': {'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '+'}, 'operator': '/'}, 'operator': '*'}}}]}, 'condition': {'operandl': {'arguments': [{'operandl': {'operator': '*'}, 'operator': '-'}]}, 'operator': '>'}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using do-while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,For-1,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=n)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=epsilon)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=initialGuess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=+), operator=*)), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using for loop (fixed iterations): ""), operandr=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandr': {'operator': '/'}, 'operator': '+'}, 'operator': '*'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using for loop (fixed iterations): ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,For-2,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=epsilon)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=initialGuess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=+), operator=*)), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using for loop (fixed iterations): ""), operandr=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandr': {'operator': '/'}, 'operator': '+'}, 'operator': '*'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using for loop (fixed iterations): ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,For-3,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=tolerance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=initialGuess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=maxIterations)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=+), operator=*)), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=maxIterations, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using for loop (fixed iterations): ""), operandr=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandr': {'operator': '/'}, 'operator': '+'}, 'operator': '*'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using for loop (fixed iterations): ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,For-4,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=tolerance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=initialGuess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=max)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=+), operator=*)), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=max, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using for loop (fixed iterations): ""), operandr=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandr': {'operator': '/'}, 'operator': '+'}, 'operator': '*'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using for loop (fixed iterations): ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,For-5,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=tolerance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=Guess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=max)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=*)), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=max, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using for loop (fixed iterations): ""), operandr=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandl': {'operandl': {'operator': '*'}, 'operator': '+'}, 'operator': '/'}, 'operator': '*'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using for loop (fixed iterations): ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,For-6,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=tolerance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=Guess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=max)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=*)), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=max, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using for loop (fixed iterations): ""), operandr=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandl': {'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '+'}, 'operator': '/'}, 'operator': '*'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using for loop (fixed iterations): ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,For-7,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=tolerance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=Guess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), name=max)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=*)), label=None)]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=max, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'int'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandl': {'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '+'}, 'operator': '/'}, 'operator': '*'}}}]}, 'control': {'condition': {'operator': '<'}, 'init': {'type': 'int'}, 'update': [{'postfix_operators': [{}]}]}}, {'expression': {'arguments': [{}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,While-1,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=n)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=epsilon)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=initialGuess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), WhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=+), operator=*)), label=None)]), condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=epsilon, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using while loop: ""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandr': {'operator': '/'}, 'operator': '+'}, 'operator': '*'}}}]}, 'condition': {'operandl': {'arguments': [{'operandl': {'operator': '*'}, 'operator': '-'}]}, 'operator': '>'}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,While-10,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=tolerance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=Guess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), name=temp)], modifiers=set(), type=BasicType(dimensions=[], name=double)), WhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=*)), label=None)]), condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=tolerance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using while loop: ""), operandr=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandl': {'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '+'}, 'operator': '/'}, 'operator': '*'}}}]}, 'condition': {'operandl': {'arguments': [{'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}]}, 'operator': '<', 'prefix_operators': [{}]}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,While-11,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=tolerance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=Guess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), name=temp)], modifiers=set(), type=BasicType(dimensions=[], name=double)), WhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=*)), label=None)]), condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=tolerance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using while loop: ""), operandr=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandl': {'operandl': {'operator': '*'}, 'operator': '+'}, 'operator': '/'}, 'operator': '*'}}}]}, 'condition': {'operandl': {'arguments': [{'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}]}, 'operator': '>'}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,While-12,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=tolerance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=Guess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), name=temp)], modifiers=set(), type=BasicType(dimensions=[], name=double)), WhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=*)), label=None)]), condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=tolerance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using while loop: ""), operandr=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandl': {'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '+'}, 'operator': '/'}, 'operator': '*'}}}]}, 'condition': {'operandl': {'arguments': [{'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}]}, 'operator': '>'}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,While-2,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=epsilon)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=initialGuess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), WhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=+), operator=*)), label=None)]), condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=epsilon, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using while loop: ""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandr': {'operator': '/'}, 'operator': '+'}, 'operator': '*'}}}]}, 'condition': {'operandl': {'arguments': [{'operandl': {'operator': '*'}, 'operator': '-'}]}, 'operator': '>'}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,While-3,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=tolerance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=initialGuess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=initialGuess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), WhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=+), operator=*)), label=None)]), condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=tolerance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using while loop: ""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandr': {'operator': '/'}, 'operator': '+'}, 'operator': '*'}}}]}, 'condition': {'operandl': {'arguments': [{'operandl': {'operator': '*'}, 'operator': '-'}]}, 'operator': '>'}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,While-4,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=tolerance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=Guess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=double)), WhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=+), operator=*)), label=None)]), condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=tolerance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using while loop: ""), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandr': {'operator': '/'}, 'operator': '+'}, 'operator': '*'}}}]}, 'condition': {'operandl': {'arguments': [{'operandl': {'operator': '*'}, 'operator': '-'}]}, 'operator': '>'}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,While-5,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=tolerance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=Guess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), name=temp)], modifiers=set(), type=BasicType(dimensions=[], name=double)), WhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=+), operator=*)), label=None)]), condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=tolerance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using while loop: ""), operandr=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandr': {'operator': '/'}, 'operator': '+'}, 'operator': '*'}}}]}, 'condition': {'operandl': {'arguments': [{'operandl': {'operator': '*'}, 'operator': '-'}]}, 'operator': '>'}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,While-6,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=tolerance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=Guess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), name=temp)], modifiers=set(), type=BasicType(dimensions=[], name=double)), WhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=+), operator=*)), label=None)]), condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=tolerance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using while loop: ""), operandr=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandr': {'operator': '/'}, 'operator': '+'}, 'operator': '*'}}}]}, 'condition': {'operandl': {'arguments': [{'operandl': {'operator': '*'}, 'operator': '-'}]}, 'operator': '<', 'prefix_operators': [{}]}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,While-7,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=tolerance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=Guess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), name=temp)], modifiers=set(), type=BasicType(dimensions=[], name=double)), WhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=+), operator=*)), label=None)]), condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=tolerance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using while loop: ""), operandr=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandr': {'operator': '/'}, 'operator': '+'}, 'operator': '*'}}}]}, 'condition': {'operandl': {'arguments': [{'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}]}, 'operator': '>'}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,While-8,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=tolerance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=Guess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), name=temp)], modifiers=set(), type=BasicType(dimensions=[], name=double)), WhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=+), operator=*)), label=None)]), condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=tolerance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using while loop: ""), operandr=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandr': {'operator': '/'}, 'operator': '+'}, 'operator': '*'}}}]}, 'condition': {'operandl': {'arguments': [{'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}]}, 'operator': '<', 'prefix_operators': [{}]}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
NewtonRaphsonMethod,While-9,"CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25.0), name=number)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1e-6), name=tolerance)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/), name=Guess)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=Guess, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), name=temp)], modifiers=set(), type=BasicType(dimensions=[], name=double)), WhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), operandr=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=/), operator=*)), label=None)]), condition=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=pow, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-)], member=abs, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), operandr=MemberReference(member=tolerance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""Square root using while loop: ""), operandr=MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], documentation=None, modifiers={'public', 'static'}, name=main, parameters=[FormalParameter(annotations=[], modifiers=set(), name=args, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=None, extends=None, implements=None, modifiers={'public'}, name=NewtonRaphsonMethod, type_parameters=None)])","{'types': [{'body': [{'body': [{'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'type': 'double'}, {'body': {'statements': [{'expression': {'type': '=', 'value': {'operandl': {'value': '0.5'}, 'operandr': {'operandl': {'operandl': {'operator': '*'}, 'operator': '+'}, 'operator': '/'}, 'operator': '*'}}}]}, 'condition': {'operandl': {'arguments': [{'operandl': {'arguments': [{}, {'value': '2'}]}, 'operator': '-'}]}, 'operator': '<', 'prefix_operators': [{}]}}, {'expression': {'arguments': [{'operandl': {'value': '""Square root using while loop: ""'}, 'operator': '+'}]}}], 'name': 'main', 'parameters': [{'dimensions': [{}], 'name': 'String'}]}], 'name': 'NewtonRaphsonMethod'}]}"
